{
  "version": 3,
  "sources": ["../node_modules/viem/errors/version.ts", "../node_modules/viem/errors/base.ts", "../node_modules/viem/errors/encoding.ts", "../node_modules/viem/utils/data/isHex.ts", "../node_modules/viem/utils/data/size.ts", "../node_modules/viem/utils/data/trim.ts", "../node_modules/viem/errors/data.ts", "../node_modules/viem/utils/data/pad.ts", "../node_modules/viem/utils/encoding/toHex.ts", "../node_modules/viem/utils/encoding/toBytes.ts", "../node_modules/viem/utils/encoding/fromHex.ts", "../node_modules/viem/utils/formatters/formatter.ts", "../node_modules/viem/utils/formatters/transactionRequest.ts", "../node_modules/viem/constants/number.ts", "../node_modules/viem/utils/data/concat.ts", "../node_modules/viem/errors/cursor.ts", "../node_modules/viem/utils/cursor.ts", "../node_modules/viem/constants/unit.ts", "../node_modules/viem/utils/unit/formatUnits.ts", "../node_modules/viem/utils/unit/formatEther.ts", "../node_modules/viem/utils/unit/formatGwei.ts", "../node_modules/viem/errors/transaction.ts", "../node_modules/@noble/hashes/src/_assert.ts", "../node_modules/@noble/hashes/src/utils.ts", "../node_modules/@noble/hashes/src/_md.ts", "../node_modules/@noble/hashes/src/sha256.ts", "../node_modules/viem/errors/address.ts", "../node_modules/viem/errors/chain.ts", "../node_modules/viem/errors/node.ts", "../node_modules/viem/utils/lru.ts", "../node_modules/@noble/hashes/src/_u64.ts", "../node_modules/@noble/hashes/src/sha3.ts", "../node_modules/viem/utils/hash/keccak256.ts", "../node_modules/viem/utils/address/getAddress.ts", "../node_modules/viem/utils/address/isAddress.ts", "../node_modules/viem/utils/data/slice.ts", "../node_modules/viem/accounts/utils/parseAccount.ts", "../node_modules/viem/errors/stateOverride.ts", "../node_modules/viem/errors/contract.ts", "../node_modules/viem/utils/errors/getNodeError.ts", "../node_modules/viem/utils/errors/getCallError.ts", "../node_modules/viem/utils/formatters/extract.ts", "../node_modules/viem/utils/transaction/assertRequest.ts", "../src/index.ts", "../src/constants/config.ts", "../node_modules/viem/utils/chain/defineChain.ts", "../node_modules/viem/utils/formatters/block.ts", "../node_modules/viem/utils/formatters/transaction.ts", "../node_modules/viem/utils/formatters/log.ts", "../node_modules/viem/utils/formatters/transactionReceipt.ts", "../node_modules/viem/utils/encoding/toRlp.ts", "../node_modules/viem/utils/transaction/serializeTransaction.ts", "../node_modules/viem/utils/authorization/serializeAuthorizationList.ts", "../node_modules/viem/utils/blob/blobsToCommitments.ts", "../node_modules/viem/utils/blob/blobsToProofs.ts", "../node_modules/viem/utils/blob/commitmentToVersionedHash.ts", "../node_modules/viem/utils/hash/sha256.ts", "../node_modules/viem/utils/blob/commitmentsToVersionedHashes.ts", "../node_modules/viem/errors/blob.ts", "../node_modules/viem/utils/blob/toBlobs.ts", "../node_modules/viem/utils/blob/toBlobSidecars.ts", "../node_modules/viem/utils/transaction/assertTransaction.ts", "../node_modules/viem/utils/transaction/getTransactionType.ts", "../node_modules/viem/utils/transaction/serializeAccessList.ts", "../node_modules/viem/op-stack/contracts.ts", "../node_modules/viem/op-stack/formatters.ts", "../node_modules/viem/op-stack/serializers.ts", "../node_modules/viem/op-stack/chainConfig.ts", "../node_modules/viem/chains/definitions/arbitrum.ts", "../node_modules/viem/chains/definitions/arbitrumSepolia.ts", "../node_modules/viem/chains/definitions/avalanche.ts", "../node_modules/viem/chains/definitions/avalancheFuji.ts", "../node_modules/viem/chains/definitions/base.ts", "../node_modules/viem/chains/definitions/baseSepolia.ts", "../node_modules/viem/chains/definitions/bitlayerTestnet.ts", "../node_modules/viem/chains/definitions/blastSepolia.ts", "../node_modules/viem/chains/definitions/botanixTestnet.ts", "../node_modules/viem/chains/definitions/bscTestnet.ts", "../node_modules/viem/celo/fees.ts", "../node_modules/viem/celo/formatters.ts", "../node_modules/viem/celo/utils.ts", "../node_modules/viem/celo/serializers.ts", "../node_modules/viem/celo/chainConfig.ts", "../node_modules/viem/chains/definitions/celoAlfajores.ts", "../node_modules/viem/chains/definitions/cronosTestnet.ts", "../node_modules/viem/chains/definitions/gnosisChiado.ts", "../node_modules/viem/chains/definitions/hashkeyChainTestnet.ts", "../node_modules/viem/chains/definitions/inkSepolia.ts", "../node_modules/viem/linea/actions/estimateGas.ts", "../node_modules/viem/errors/account.ts", "../node_modules/viem/linea/chainConfig.ts", "../node_modules/viem/chains/definitions/lineaSepolia.ts", "../node_modules/viem/chains/definitions/mainnet.ts", "../node_modules/viem/chains/definitions/mantleSepoliaTestnet.ts", "../node_modules/viem/chains/definitions/megaethTestnet.ts", "../node_modules/viem/chains/definitions/modeTestnet.ts", "../node_modules/viem/chains/definitions/monadTestnet.ts", "../node_modules/viem/chains/definitions/optimism.ts", "../node_modules/viem/chains/definitions/optimismSepolia.ts", "../node_modules/viem/chains/definitions/polygon.ts", "../node_modules/viem/chains/definitions/polygonAmoy.ts", "../node_modules/viem/chains/definitions/saigon.ts", "../node_modules/viem/chains/definitions/scrollSepolia.ts", "../node_modules/viem/chains/definitions/seiTestnet.ts", "../node_modules/viem/chains/definitions/sepolia.ts", "../node_modules/viem/chains/definitions/shibariumTestnet.ts", "../node_modules/viem/chains/definitions/soneiumMinato.ts", "../node_modules/viem/chains/definitions/sonicBlazeTestnet.ts", "../node_modules/viem/chains/definitions/unichainSepolia.ts", "../node_modules/viem/chains/definitions/xLayerTestnet.ts", "../node_modules/viem/chains/definitions/zircuitTestnet.ts", "../src/networks/networkTypes.ts", "../src/networks/mainnetNetworks.ts", "../src/networks/customViemChains.ts", "../src/networks/testnetNetworks.ts", "../src/networks/networkEnvKeys.ts", "../src/networks/index.ts"],
  "sourcesContent": ["export const version = '2.26.2'\n", "import { version } from './version.js'\n\ntype ErrorConfig = {\n  getDocsUrl?: ((args: BaseErrorParameters) => string | undefined) | undefined\n  version?: string | undefined\n}\n\nlet errorConfig: ErrorConfig = {\n  getDocsUrl: ({\n    docsBaseUrl,\n    docsPath = '',\n    docsSlug,\n  }: BaseErrorParameters) =>\n    docsPath\n      ? `${docsBaseUrl ?? 'https://viem.sh'}${docsPath}${\n          docsSlug ? `#${docsSlug}` : ''\n        }`\n      : undefined,\n  version: `viem@${version}`,\n}\n\nexport function setErrorConfig(config: ErrorConfig) {\n  errorConfig = config\n}\n\ntype BaseErrorParameters = {\n  cause?: BaseError | Error | undefined\n  details?: string | undefined\n  docsBaseUrl?: string | undefined\n  docsPath?: string | undefined\n  docsSlug?: string | undefined\n  metaMessages?: string[] | undefined\n  name?: string | undefined\n}\n\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n  version: string\n\n  override name = 'BaseError'\n\n  constructor(shortMessage: string, args: BaseErrorParameters = {}) {\n    const details = (() => {\n      if (args.cause instanceof BaseError) return args.cause.details\n      if (args.cause?.message) return args.cause.message\n      return args.details!\n    })()\n    const docsPath = (() => {\n      if (args.cause instanceof BaseError)\n        return args.cause.docsPath || args.docsPath\n      return args.docsPath\n    })()\n    const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath })\n\n    const message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n      ...(docsUrl ? [`Docs: ${docsUrl}`] : []),\n      ...(details ? [`Details: ${details}`] : []),\n      ...(errorConfig.version ? [`Version: ${errorConfig.version}`] : []),\n    ].join('\\n')\n\n    super(message, args.cause ? { cause: args.cause } : undefined)\n\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = args.metaMessages\n    this.name = args.name ?? this.name\n    this.shortMessage = shortMessage\n    this.version = version\n  }\n\n  walk(): Error\n  walk(fn: (err: unknown) => boolean): Error | null\n  walk(fn?: any): any {\n    return walk(this, fn)\n  }\n}\n\nfunction walk(\n  err: unknown,\n  fn?: ((err: unknown) => boolean) | undefined,\n): unknown {\n  if (fn?.(err)) return err\n  if (\n    err &&\n    typeof err === 'object' &&\n    'cause' in err &&\n    err.cause !== undefined\n  )\n    return walk(err.cause, fn)\n  return fn ? null : err\n}\n", "import type { ByteArray, Hex } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\n  name: 'IntegerOutOfRangeError'\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value,\n  }: {\n    max?: string | undefined\n    min: string\n    signed?: boolean | undefined\n    size?: number | undefined\n    value: string\n  }) {\n    super(\n      `Number \"${value}\" is not in safe ${\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\n      { name: 'IntegerOutOfRangeError' },\n    )\n  }\n}\n\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\n  name: 'InvalidBytesBooleanError'\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  constructor(bytes: ByteArray) {\n    super(\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\n      {\n        name: 'InvalidBytesBooleanError',\n      },\n    )\n  }\n}\n\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\n  name: 'InvalidHexBooleanError'\n}\nexport class InvalidHexBooleanError extends BaseError {\n  constructor(hex: Hex) {\n    super(\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\n      { name: 'InvalidHexBooleanError' },\n    )\n  }\n}\n\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\n  name: 'InvalidHexValueError'\n}\nexport class InvalidHexValueError extends BaseError {\n  constructor(value: Hex) {\n    super(\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\n      { name: 'InvalidHexValueError' },\n    )\n  }\n}\n\nexport type SizeOverflowErrorType = SizeOverflowError & {\n  name: 'SizeOverflowError'\n}\nexport class SizeOverflowError extends BaseError {\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\n    super(\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\n      { name: 'SizeOverflowError' },\n    )\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type IsHexErrorType = ErrorType\n\nexport function isHex(\n  value: unknown,\n  { strict = true }: { strict?: boolean | undefined } = {},\n): value is Hex {\n  if (!value) return false\n  if (typeof value !== 'string') return false\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type SizeErrorType = IsHexErrorType | ErrorType\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value: Hex | ByteArray) {\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\n  return value.length\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype TrimOptions = {\n  dir?: 'left' | 'right' | undefined\n}\nexport type TrimReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type TrimErrorType = ErrorType\n\nexport function trim<value extends ByteArray | Hex>(\n  hexOrBytes: value,\n  { dir = 'left' }: TrimOptions = {},\n): TrimReturnType<value> {\n  let data: any =\n    typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes\n\n  let sliceLength = 0\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n      sliceLength++\n    else break\n  }\n  data =\n    dir === 'left'\n      ? data.slice(sliceLength)\n      : data.slice(0, data.length - sliceLength)\n\n  if (typeof hexOrBytes === 'string') {\n    if (data.length === 1 && dir === 'right') data = `${data}0`\n    return `0x${\n      data.length % 2 === 1 ? `0${data}` : data\n    }` as TrimReturnType<value>\n  }\n  return data as TrimReturnType<value>\n}\n", "import { BaseError } from './base.js'\n\nexport type SliceOffsetOutOfBoundsErrorType = SliceOffsetOutOfBoundsError & {\n  name: 'SliceOffsetOutOfBoundsError'\n}\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n  constructor({\n    offset,\n    position,\n    size,\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\n    super(\n      `Slice ${\n        position === 'start' ? 'starting' : 'ending'\n      } at offset \"${offset}\" is out-of-bounds (size: ${size}).`,\n      { name: 'SliceOffsetOutOfBoundsError' },\n    )\n  }\n}\n\nexport type SizeExceedsPaddingSizeErrorType = SizeExceedsPaddingSizeError & {\n  name: 'SizeExceedsPaddingSizeError'\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`,\n      { name: 'SizeExceedsPaddingSizeError' },\n    )\n  }\n}\n\nexport type InvalidBytesLengthErrorType = InvalidBytesLengthError & {\n  name: 'InvalidBytesLengthError'\n}\nexport class InvalidBytesLengthError extends BaseError {\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`,\n      { name: 'InvalidBytesLengthError' },\n    )\n  }\n}\n", "import {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype PadOptions = {\n  dir?: 'left' | 'right' | undefined\n  size?: number | null | undefined\n}\nexport type PadReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\n\nexport function pad<value extends ByteArray | Hex>(\n  hexOrBytes: value,\n  { dir, size = 32 }: PadOptions = {},\n): PadReturnType<value> {\n  if (typeof hexOrBytes === 'string')\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<value>\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<value>\n}\n\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) return hex_\n  const hex = hex_.replace('0x', '')\n  if (hex.length > size * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'hex',\n    })\n\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\n    size * 2,\n    '0',\n  )}` as Hex\n}\n\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padBytes(\n  bytes: ByteArray,\n  { dir, size = 32 }: PadOptions = {},\n) {\n  if (size === null) return bytes\n  if (bytes.length > size)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'bytes',\n    })\n  const paddedBytes = new Uint8Array(size)\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right'\n    paddedBytes[padEnd ? i : size - i - 1] =\n      bytes[padEnd ? i : bytes.length - i - 1]\n  }\n  return paddedBytes\n}\n", "import {\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\n\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\n  i.toString(16).padStart(2, '0'),\n)\n\nexport type ToHexParameters = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type ToHexErrorType =\n  | BoolToHexErrorType\n  | BytesToHexErrorType\n  | NumberToHexErrorType\n  | StringToHexErrorType\n  | ErrorType\n\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(\n  value: string | number | bigint | boolean | ByteArray,\n  opts: ToHexParameters = {},\n): Hex {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToHex(value, opts)\n  if (typeof value === 'string') {\n    return stringToHex(value, opts)\n  }\n  if (typeof value === 'boolean') return boolToHex(value, opts)\n  return bytesToHex(value, opts)\n}\n\nexport type BoolToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BoolToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\n  const hex: Hex = `0x${Number(value)}`\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { size: opts.size })\n  }\n  return hex\n}\n\nexport type BytesToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BytesToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value: ByteArray, opts: BytesToHexOpts = {}): Hex {\n  let string = ''\n  for (let i = 0; i < value.length; i++) {\n    string += hexes[value[i]]\n  }\n  const hex = `0x${string}` as const\n\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { dir: 'right', size: opts.size })\n  }\n  return hex\n}\n\nexport type NumberToHexOpts =\n  | {\n      /** Whether or not the number of a signed representation. */\n      signed?: boolean | undefined\n      /** The size (in bytes) of the output hex value. */\n      size: number\n    }\n  | {\n      signed?: undefined\n      /** The size (in bytes) of the output hex value. */\n      size?: number | undefined\n    }\n\nexport type NumberToHexErrorType =\n  | IntegerOutOfRangeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(\n  value_: number | bigint,\n  opts: NumberToHexOpts = {},\n): Hex {\n  const { signed, size } = opts\n\n  const value = BigInt(value_)\n\n  let maxValue: bigint | number | undefined\n  if (size) {\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\n  } else if (typeof value_ === 'number') {\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\n  }\n\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\n\n  if ((maxValue && value > maxValue) || value < minValue) {\n    const suffix = typeof value_ === 'bigint' ? 'n' : ''\n    throw new IntegerOutOfRangeError({\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\n      min: `${minValue}${suffix}`,\n      signed,\n      size,\n      value: `${value_}${suffix}`,\n    })\n  }\n\n  const hex = `0x${(\n    signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value\n  ).toString(16)}` as Hex\n  if (size) return pad(hex, { size }) as Hex\n  return hex\n}\n\nexport type StringToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type StringToHexErrorType = BytesToHexErrorType | ErrorType\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\n  const value = encoder.encode(value_)\n  return bytesToHex(value, opts)\n}\n", "import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n} from './toHex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type ToBytesErrorType =\n  | NumberToBytesErrorType\n  | BoolToBytesErrorType\n  | HexToBytesErrorType\n  | StringToBytesErrorType\n  | IsHexErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): ByteArray {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToBytes(value, opts)\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\n  if (isHex(value)) return hexToBytes(value, opts)\n  return stringToBytes(value, opts)\n}\n\nexport type BoolToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type BoolToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\n  const bytes = new Uint8Array(1)\n  bytes[0] = Number(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { size: opts.size })\n  }\n  return bytes\n}\n\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102,\n} as const\n\nfunction charCodeToBase16(char: number) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n    return char - charCodeMap.zero\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\n    return char - (charCodeMap.A - 10)\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\n    return char - (charCodeMap.a - 10)\n  return undefined\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type HexToBytesErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = pad(hex, { dir: 'right', size: opts.size })\n  }\n\n  let hexString = hex.slice(2) as string\n  if (hexString.length % 2) hexString = `0${hexString}`\n\n  const length = hexString.length / 2\n  const bytes = new Uint8Array(length)\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++))\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++))\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new BaseError(\n        `Invalid byte sequence (\"${hexString[j - 2]}${\n          hexString[j - 1]\n        }\" in \"${hexString}\").`,\n      )\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight\n  }\n  return bytes\n}\n\nexport type NumberToBytesErrorType =\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(\n  value: bigint | number,\n  opts?: NumberToHexOpts | undefined,\n) {\n  const hex = numberToHex(value, opts)\n  return hexToBytes(hex)\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type StringToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): ByteArray {\n  const bytes = encoder.encode(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { dir: 'right', size: opts.size })\n  }\n  return bytes\n}\n", "import {\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type SizeErrorType, size as size_ } from '../data/size.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\n\nexport type AssertSizeErrorType =\n  | SizeOverflowErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function assertSize(\n  hexOrBytes: Hex | ByteArray,\n  { size }: { size: number },\n): void {\n  if (size_(hexOrBytes) > size)\n    throw new SizeOverflowError({\n      givenSize: size_(hexOrBytes),\n      maxSize: size,\n    })\n}\n\nexport type FromHexParameters<\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n> =\n  | to\n  | {\n      /** Size (in bytes) of the hex value. */\n      size?: number | undefined\n      /** Type to convert to. */\n      to: to\n    }\n\nexport type FromHexReturnType<to> = to extends 'string'\n  ? string\n  : to extends 'bigint'\n    ? bigint\n    : to extends 'number'\n      ? number\n      : to extends 'bytes'\n        ? ByteArray\n        : to extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromHexErrorType =\n  | HexToNumberErrorType\n  | HexToBigIntErrorType\n  | HexToBoolErrorType\n  | HexToStringErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex<\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n>(hex: Hex, toOrOpts: FromHexParameters<to>): FromHexReturnType<to> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number') return hexToNumber(hex, opts) as FromHexReturnType<to>\n  if (to === 'bigint') return hexToBigInt(hex, opts) as FromHexReturnType<to>\n  if (to === 'string') return hexToString(hex, opts) as FromHexReturnType<to>\n  if (to === 'boolean') return hexToBool(hex, opts) as FromHexReturnType<to>\n  return hexToBytes(hex, opts) as FromHexReturnType<to>\n}\n\nexport type HexToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean | undefined\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBigIntErrorType = AssertSizeErrorType | ErrorType\n\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\n  const { signed } = opts\n\n  if (opts.size) assertSize(hex, { size: opts.size })\n\n  const value = BigInt(hex)\n  if (!signed) return value\n\n  const size = (hex.length - 2) / 2\n  const max = (1n << (BigInt(size) * 8n - 1n)) - 1n\n  if (value <= max) return value\n\n  return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n\n}\n\nexport type HexToBoolOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBoolErrorType =\n  | AssertSizeErrorType\n  | InvalidHexBooleanErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_: Hex, opts: HexToBoolOpts = {}): boolean {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = trim(hex)\n  }\n  if (trim(hex) === '0x00') return false\n  if (trim(hex) === '0x01') return true\n  throw new InvalidHexBooleanError(hex)\n}\n\nexport type HexToNumberOpts = HexToBigIntOpts\n\nexport type HexToNumberErrorType = HexToBigIntErrorType | ErrorType\n\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\n  return Number(hexToBigInt(hex, opts))\n}\n\nexport type HexToStringOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToStringErrorType =\n  | AssertSizeErrorType\n  | HexToBytesErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\n  let bytes = hexToBytes(hex)\n  if (opts.size) {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Prettify } from '../../types/utils.js'\n\nexport type DefineFormatterErrorType = ErrorType\n\nexport function defineFormatter<type extends string, parameters, returnType>(\n  type: type,\n  format: (_: parameters) => returnType,\n) {\n  return <\n    parametersOverride,\n    returnTypeOverride,\n    exclude extends (keyof parameters | keyof parametersOverride)[] = [],\n  >({\n    exclude,\n    format: overrides,\n  }: {\n    exclude?: exclude | undefined\n    format: (_: parametersOverride) => returnTypeOverride\n  }) => {\n    return {\n      exclude,\n      format: (args: parametersOverride) => {\n        const formatted = format(args as any)\n        if (exclude) {\n          for (const key of exclude) {\n            delete (formatted as any)[key]\n          }\n        }\n        return {\n          ...formatted,\n          ...overrides(args),\n        } as Prettify<returnTypeOverride> & {\n          [_key in exclude[number]]: never\n        }\n      },\n      type,\n    }\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { AuthorizationList } from '../../types/authorization.js'\nimport type {\n  Chain,\n  ExtractChainFormatterParameters,\n} from '../../types/chain.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport type {\n  RpcAuthorizationList,\n  RpcTransactionRequest,\n} from '../../types/rpc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { bytesToHex, numberToHex } from '../encoding/toHex.js'\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\n\nexport type FormattedTransactionRequest<\n  chain extends Chain | undefined = Chain | undefined,\n> = ExtractChainFormatterParameters<\n  chain,\n  'transactionRequest',\n  TransactionRequest\n>\n\nexport const rpcTransactionType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4',\n} as const\n\nexport type FormatTransactionRequestErrorType = ErrorType\n\nexport function formatTransactionRequest(\n  request: ExactPartial<TransactionRequest>,\n) {\n  const rpcRequest = {} as RpcTransactionRequest\n\n  if (typeof request.authorizationList !== 'undefined')\n    rpcRequest.authorizationList = formatAuthorizationList(\n      request.authorizationList,\n    )\n  if (typeof request.accessList !== 'undefined')\n    rpcRequest.accessList = request.accessList\n  if (typeof request.blobVersionedHashes !== 'undefined')\n    rpcRequest.blobVersionedHashes = request.blobVersionedHashes\n  if (typeof request.blobs !== 'undefined') {\n    if (typeof request.blobs[0] !== 'string')\n      rpcRequest.blobs = (request.blobs as ByteArray[]).map((x) =>\n        bytesToHex(x),\n      )\n    else rpcRequest.blobs = request.blobs\n  }\n  if (typeof request.data !== 'undefined') rpcRequest.data = request.data\n  if (typeof request.from !== 'undefined') rpcRequest.from = request.from\n  if (typeof request.gas !== 'undefined')\n    rpcRequest.gas = numberToHex(request.gas)\n  if (typeof request.gasPrice !== 'undefined')\n    rpcRequest.gasPrice = numberToHex(request.gasPrice)\n  if (typeof request.maxFeePerBlobGas !== 'undefined')\n    rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas)\n  if (typeof request.maxFeePerGas !== 'undefined')\n    rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas)\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\n    rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas)\n  if (typeof request.nonce !== 'undefined')\n    rpcRequest.nonce = numberToHex(request.nonce)\n  if (typeof request.to !== 'undefined') rpcRequest.to = request.to\n  if (typeof request.type !== 'undefined')\n    rpcRequest.type = rpcTransactionType[request.type]\n  if (typeof request.value !== 'undefined')\n    rpcRequest.value = numberToHex(request.value)\n\n  return rpcRequest\n}\n\nexport type DefineTransactionRequestErrorType =\n  | DefineFormatterErrorType\n  | ErrorType\n\nexport const defineTransactionRequest = /*#__PURE__*/ defineFormatter(\n  'transactionRequest',\n  formatTransactionRequest,\n)\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction formatAuthorizationList(\n  authorizationList: AuthorizationList<number, boolean>,\n): RpcAuthorizationList {\n  return authorizationList.map(\n    (authorization) =>\n      ({\n        address: authorization.address,\n        r: authorization.r\n          ? numberToHex(BigInt(authorization.r))\n          : authorization.r,\n        s: authorization.s\n          ? numberToHex(BigInt(authorization.s))\n          : authorization.s,\n        chainId: numberToHex(authorization.chainId),\n        nonce: numberToHex(authorization.nonce),\n        ...(typeof authorization.yParity !== 'undefined'\n          ? { yParity: numberToHex(authorization.yParity) }\n          : {}),\n        ...(typeof authorization.v !== 'undefined' &&\n        typeof authorization.yParity === 'undefined'\n          ? { v: numberToHex(authorization.v) }\n          : {}),\n      }) as any,\n  ) as RpcAuthorizationList\n}\n", "export const maxInt8 = 2n ** (8n - 1n) - 1n\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\n\nexport const minInt8 = -(2n ** (8n - 1n))\nexport const minInt16 = -(2n ** (16n - 1n))\nexport const minInt24 = -(2n ** (24n - 1n))\nexport const minInt32 = -(2n ** (32n - 1n))\nexport const minInt40 = -(2n ** (40n - 1n))\nexport const minInt48 = -(2n ** (48n - 1n))\nexport const minInt56 = -(2n ** (56n - 1n))\nexport const minInt64 = -(2n ** (64n - 1n))\nexport const minInt72 = -(2n ** (72n - 1n))\nexport const minInt80 = -(2n ** (80n - 1n))\nexport const minInt88 = -(2n ** (88n - 1n))\nexport const minInt96 = -(2n ** (96n - 1n))\nexport const minInt104 = -(2n ** (104n - 1n))\nexport const minInt112 = -(2n ** (112n - 1n))\nexport const minInt120 = -(2n ** (120n - 1n))\nexport const minInt128 = -(2n ** (128n - 1n))\nexport const minInt136 = -(2n ** (136n - 1n))\nexport const minInt144 = -(2n ** (144n - 1n))\nexport const minInt152 = -(2n ** (152n - 1n))\nexport const minInt160 = -(2n ** (160n - 1n))\nexport const minInt168 = -(2n ** (168n - 1n))\nexport const minInt176 = -(2n ** (176n - 1n))\nexport const minInt184 = -(2n ** (184n - 1n))\nexport const minInt192 = -(2n ** (192n - 1n))\nexport const minInt200 = -(2n ** (200n - 1n))\nexport const minInt208 = -(2n ** (208n - 1n))\nexport const minInt216 = -(2n ** (216n - 1n))\nexport const minInt224 = -(2n ** (224n - 1n))\nexport const minInt232 = -(2n ** (232n - 1n))\nexport const minInt240 = -(2n ** (240n - 1n))\nexport const minInt248 = -(2n ** (248n - 1n))\nexport const minInt256 = -(2n ** (256n - 1n))\n\nexport const maxUint8 = 2n ** 8n - 1n\nexport const maxUint16 = 2n ** 16n - 1n\nexport const maxUint24 = 2n ** 24n - 1n\nexport const maxUint32 = 2n ** 32n - 1n\nexport const maxUint40 = 2n ** 40n - 1n\nexport const maxUint48 = 2n ** 48n - 1n\nexport const maxUint56 = 2n ** 56n - 1n\nexport const maxUint64 = 2n ** 64n - 1n\nexport const maxUint72 = 2n ** 72n - 1n\nexport const maxUint80 = 2n ** 80n - 1n\nexport const maxUint88 = 2n ** 88n - 1n\nexport const maxUint96 = 2n ** 96n - 1n\nexport const maxUint104 = 2n ** 104n - 1n\nexport const maxUint112 = 2n ** 112n - 1n\nexport const maxUint120 = 2n ** 120n - 1n\nexport const maxUint128 = 2n ** 128n - 1n\nexport const maxUint136 = 2n ** 136n - 1n\nexport const maxUint144 = 2n ** 144n - 1n\nexport const maxUint152 = 2n ** 152n - 1n\nexport const maxUint160 = 2n ** 160n - 1n\nexport const maxUint168 = 2n ** 168n - 1n\nexport const maxUint176 = 2n ** 176n - 1n\nexport const maxUint184 = 2n ** 184n - 1n\nexport const maxUint192 = 2n ** 192n - 1n\nexport const maxUint200 = 2n ** 200n - 1n\nexport const maxUint208 = 2n ** 208n - 1n\nexport const maxUint216 = 2n ** 216n - 1n\nexport const maxUint224 = 2n ** 224n - 1n\nexport const maxUint232 = 2n ** 232n - 1n\nexport const maxUint240 = 2n ** 240n - 1n\nexport const maxUint248 = 2n ** 248n - 1n\nexport const maxUint256 = 2n ** 256n - 1n\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nexport type ConcatReturnType<value extends Hex | ByteArray> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type ConcatErrorType =\n  | ConcatBytesErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function concat<value extends Hex | ByteArray>(\n  values: readonly value[],\n): ConcatReturnType<value> {\n  if (typeof values[0] === 'string')\n    return concatHex(values as readonly Hex[]) as ConcatReturnType<value>\n  return concatBytes(values as readonly ByteArray[]) as ConcatReturnType<value>\n}\n\nexport type ConcatBytesErrorType = ErrorType\n\nexport function concatBytes(values: readonly ByteArray[]): ByteArray {\n  let length = 0\n  for (const arr of values) {\n    length += arr.length\n  }\n  const result = new Uint8Array(length)\n  let offset = 0\n  for (const arr of values) {\n    result.set(arr, offset)\n    offset += arr.length\n  }\n  return result\n}\n\nexport type ConcatHexErrorType = ErrorType\n\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace('0x', ''),\n    '',\n  )}`\n}\n", "import { BaseError } from './base.js'\n\nexport type NegativeOffsetErrorType = NegativeOffsetError & {\n  name: 'NegativeOffsetError'\n}\nexport class NegativeOffsetError extends BaseError {\n  constructor({ offset }: { offset: number }) {\n    super(`Offset \\`${offset}\\` cannot be negative.`, {\n      name: 'NegativeOffsetError',\n    })\n  }\n}\n\nexport type PositionOutOfBoundsErrorType = PositionOutOfBoundsError & {\n  name: 'PositionOutOfBoundsError'\n}\nexport class PositionOutOfBoundsError extends BaseError {\n  constructor({ length, position }: { length: number; position: number }) {\n    super(\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\n      { name: 'PositionOutOfBoundsError' },\n    )\n  }\n}\n\nexport type RecursiveReadLimitExceededErrorType =\n  RecursiveReadLimitExceededError & {\n    name: 'RecursiveReadLimitExceededError'\n  }\nexport class RecursiveReadLimitExceededError extends BaseError {\n  constructor({ count, limit }: { count: number; limit: number }) {\n    super(\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\n      { name: 'RecursiveReadLimitExceededError' },\n    )\n  }\n}\n", "import {\n  NegativeOffsetError,\n  type NegativeOffsetErrorType,\n  PositionOutOfBoundsError,\n  type PositionOutOfBoundsErrorType,\n  RecursiveReadLimitExceededError,\n  type RecursiveReadLimitExceededErrorType,\n} from '../errors/cursor.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ByteArray } from '../types/misc.js'\n\nexport type Cursor = {\n  bytes: ByteArray\n  dataView: DataView\n  position: number\n  positionReadCount: Map<number, number>\n  recursiveReadCount: number\n  recursiveReadLimit: number\n  remaining: number\n  assertReadLimit(position?: number): void\n  assertPosition(position: number): void\n  decrementPosition(offset: number): void\n  getReadCount(position?: number): number\n  incrementPosition(offset: number): void\n  inspectByte(position?: number): ByteArray[number]\n  inspectBytes(length: number, position?: number): ByteArray\n  inspectUint8(position?: number): number\n  inspectUint16(position?: number): number\n  inspectUint24(position?: number): number\n  inspectUint32(position?: number): number\n  pushByte(byte: ByteArray[number]): void\n  pushBytes(bytes: ByteArray): void\n  pushUint8(value: number): void\n  pushUint16(value: number): void\n  pushUint24(value: number): void\n  pushUint32(value: number): void\n  readByte(): ByteArray[number]\n  readBytes(length: number, size?: number): ByteArray\n  readUint8(): number\n  readUint16(): number\n  readUint24(): number\n  readUint32(): number\n  setPosition(position: number): () => void\n  _touch(): void\n}\n\ntype CursorErrorType =\n  | CursorAssertPositionErrorType\n  | CursorDecrementPositionErrorType\n  | CursorIncrementPositionErrorType\n  | ErrorType\n\ntype CursorAssertPositionErrorType = PositionOutOfBoundsErrorType | ErrorType\n\ntype CursorDecrementPositionErrorType = NegativeOffsetErrorType | ErrorType\n\ntype CursorIncrementPositionErrorType = NegativeOffsetErrorType | ErrorType\n\ntype StaticCursorErrorType =\n  | NegativeOffsetErrorType\n  | RecursiveReadLimitExceededErrorType\n\nconst staticCursor: Cursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  positionReadCount: new Map(),\n  recursiveReadCount: 0,\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\n  assertReadLimit() {\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\n      throw new RecursiveReadLimitExceededError({\n        count: this.recursiveReadCount + 1,\n        limit: this.recursiveReadLimit,\n      })\n  },\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1)\n      throw new PositionOutOfBoundsError({\n        length: this.bytes.length,\n        position,\n      })\n  },\n  decrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position - offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  getReadCount(position) {\n    return this.positionReadCount.get(position || this.position) || 0\n  },\n  incrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position + offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + length - 1)\n    return this.bytes.subarray(position, position + length)\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 1)\n    return this.dataView.getUint16(position)\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 2)\n    return (\n      (this.dataView.getUint16(position) << 8) +\n      this.dataView.getUint8(position + 2)\n    )\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 3)\n    return this.dataView.getUint32(position)\n  },\n  pushByte(byte: ByteArray[number]) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = byte\n    this.position++\n  },\n  pushBytes(bytes: ByteArray) {\n    this.assertPosition(this.position + bytes.length - 1)\n    this.bytes.set(bytes, this.position)\n    this.position += bytes.length\n  },\n  pushUint8(value: number) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = value\n    this.position++\n  },\n  pushUint16(value: number) {\n    this.assertPosition(this.position + 1)\n    this.dataView.setUint16(this.position, value)\n    this.position += 2\n  },\n  pushUint24(value: number) {\n    this.assertPosition(this.position + 2)\n    this.dataView.setUint16(this.position, value >> 8)\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\n    this.position += 3\n  },\n  pushUint32(value: number) {\n    this.assertPosition(this.position + 3)\n    this.dataView.setUint32(this.position, value)\n    this.position += 4\n  },\n  readByte() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectByte()\n    this.position++\n    return value\n  },\n  readBytes(length, size) {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectBytes(length)\n    this.position += size ?? length\n    return value\n  },\n  readUint8() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint8()\n    this.position += 1\n    return value\n  },\n  readUint16() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint16()\n    this.position += 2\n    return value\n  },\n  readUint24() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint24()\n    this.position += 3\n    return value\n  },\n  readUint32() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint32()\n    this.position += 4\n    return value\n  },\n  get remaining() {\n    return this.bytes.length - this.position\n  },\n  setPosition(position) {\n    const oldPosition = this.position\n    this.assertPosition(position)\n    this.position = position\n    return () => (this.position = oldPosition)\n  },\n  _touch() {\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return\n    const count = this.getReadCount()\n    this.positionReadCount.set(this.position, count + 1)\n    if (count > 0) this.recursiveReadCount++\n  },\n}\n\ntype CursorConfig = { recursiveReadLimit?: number | undefined }\n\nexport type CreateCursorErrorType =\n  | CursorErrorType\n  | StaticCursorErrorType\n  | ErrorType\n\nexport function createCursor(\n  bytes: ByteArray,\n  { recursiveReadLimit = 8_192 }: CursorConfig = {},\n): Cursor {\n  const cursor: Cursor = Object.create(staticCursor)\n  cursor.bytes = bytes\n  cursor.dataView = new DataView(\n    bytes.buffer,\n    bytes.byteOffset,\n    bytes.byteLength,\n  )\n  cursor.positionReadCount = new Map()\n  cursor.recursiveReadLimit = recursiveReadLimit\n  return cursor\n}\n", "export const etherUnits = {\n  gwei: 9,\n  wei: 18,\n}\nexport const gweiUnits = {\n  ether: -9,\n  wei: 9,\n}\nexport const weiUnits = {\n  ether: -18,\n  gwei: -9,\n}\n", "import type { ErrorType } from '../../errors/utils.js'\n\nexport type FormatUnitsErrorType = ErrorType\n\n/**\n *  Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\n *\n * - Docs: https://viem.sh/docs/utilities/formatUnits\n *\n * @example\n * import { formatUnits } from 'viem'\n *\n * formatUnits(420000000000n, 9)\n * // '420'\n */\nexport function formatUnits(value: bigint, decimals: number) {\n  let display = value.toString()\n\n  const negative = display.startsWith('-')\n  if (negative) display = display.slice(1)\n\n  display = display.padStart(decimals, '0')\n\n  let [integer, fraction] = [\n    display.slice(0, display.length - decimals),\n    display.slice(display.length - decimals),\n  ]\n  fraction = fraction.replace(/(0+)$/, '')\n  return `${negative ? '-' : ''}${integer || '0'}${\n    fraction ? `.${fraction}` : ''\n  }`\n}\n", "import { etherUnits } from '../../constants/unit.js'\n\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\n\nexport type FormatEtherErrorType = FormatUnitsErrorType\n\n/**\n * Converts numerical wei to a string representation of ether.\n *\n * - Docs: https://viem.sh/docs/utilities/formatEther\n *\n * @example\n * import { formatEther } from 'viem'\n *\n * formatEther(1000000000000000000n)\n * // '1'\n */\nexport function formatEther(wei: bigint, unit: 'wei' | 'gwei' = 'wei') {\n  return formatUnits(wei, etherUnits[unit])\n}\n", "import { gweiUnits } from '../../constants/unit.js'\n\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\n\nexport type FormatGweiErrorType = FormatUnitsErrorType\n\n/**\n * Converts numerical wei to a string representation of gwei.\n *\n * - Docs: https://viem.sh/docs/utilities/formatGwei\n *\n * @example\n * import { formatGwei } from 'viem'\n *\n * formatGwei(1000000000n)\n * // '1'\n */\nexport function formatGwei(wei: bigint, unit: 'wei' = 'wei') {\n  return formatUnits(wei, gweiUnits[unit])\n}\n", "import type { Account } from '../accounts/types.js'\nimport type { SendTransactionParameters } from '../actions/wallet/sendTransaction.js'\nimport type { BlockTag } from '../types/block.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hash, Hex } from '../types/misc.js'\nimport type { TransactionType } from '../types/transaction.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\nexport function prettyPrint(\n  args: Record<string, bigint | number | string | undefined | false | unknown>,\n) {\n  const entries = Object.entries(args)\n    .map(([key, value]) => {\n      if (value === undefined || value === false) return null\n      return [key, value]\n    })\n    .filter(Boolean) as [string, string][]\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\n  return entries\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\n    .join('\\n')\n}\n\nexport type FeeConflictErrorType = FeeConflictError & {\n  name: 'FeeConflictError'\n}\nexport class FeeConflictError extends BaseError {\n  constructor() {\n    super(\n      [\n        'Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.',\n        'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.',\n      ].join('\\n'),\n      { name: 'FeeConflictError' },\n    )\n  }\n}\n\nexport type InvalidLegacyVErrorType = InvalidLegacyVError & {\n  name: 'InvalidLegacyVError'\n}\nexport class InvalidLegacyVError extends BaseError {\n  constructor({ v }: { v: bigint }) {\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`, {\n      name: 'InvalidLegacyVError',\n    })\n  }\n}\n\nexport type InvalidSerializableTransactionErrorType =\n  InvalidSerializableTransactionError & {\n    name: 'InvalidSerializableTransactionError'\n  }\nexport class InvalidSerializableTransactionError extends BaseError {\n  constructor({ transaction }: { transaction: Record<string, unknown> }) {\n    super('Cannot infer a transaction type from provided transaction.', {\n      metaMessages: [\n        'Provided Transaction:',\n        '{',\n        prettyPrint(transaction),\n        '}',\n        '',\n        'To infer the type, either provide:',\n        '- a `type` to the Transaction, or',\n        '- an EIP-1559 Transaction with `maxFeePerGas`, or',\n        '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or',\n        '- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or',\n        '- an EIP-7702 Transaction with `authorizationList`, or',\n        '- a Legacy Transaction with `gasPrice`',\n      ],\n      name: 'InvalidSerializableTransactionError',\n    })\n  }\n}\n\nexport type InvalidSerializedTransactionTypeErrorType =\n  InvalidSerializedTransactionTypeError & {\n    name: 'InvalidSerializedTransactionTypeError'\n  }\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n  serializedType: Hex\n\n  constructor({ serializedType }: { serializedType: Hex }) {\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`, {\n      name: 'InvalidSerializedTransactionType',\n    })\n\n    this.serializedType = serializedType\n  }\n}\n\nexport type InvalidSerializedTransactionErrorType =\n  InvalidSerializedTransactionError & {\n    name: 'InvalidSerializedTransactionError'\n  }\nexport class InvalidSerializedTransactionError extends BaseError {\n  serializedTransaction: Hex\n  type: TransactionType\n\n  constructor({\n    attributes,\n    serializedTransaction,\n    type,\n  }: {\n    attributes: Record<string, unknown>\n    serializedTransaction: Hex\n    type: TransactionType\n  }) {\n    const missing = Object.entries(attributes)\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n      .filter(Boolean)\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [\n        `Serialized Transaction: \"${serializedTransaction}\"`,\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n      ].filter(Boolean),\n      name: 'InvalidSerializedTransactionError',\n    })\n\n    this.serializedTransaction = serializedTransaction\n    this.type = type\n  }\n}\n\nexport type InvalidStorageKeySizeErrorType = InvalidStorageKeySizeError & {\n  name: 'InvalidStorageKeySizeError'\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n  constructor({ storageKey }: { storageKey: Hex }) {\n    super(\n      `Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor(\n        (storageKey.length - 2) / 2,\n      )} bytes.`,\n      { name: 'InvalidStorageKeySizeError' },\n    )\n  }\n}\n\nexport type TransactionExecutionErrorType = TransactionExecutionError & {\n  name: 'TransactionExecutionError'\n}\nexport class TransactionExecutionError extends BaseError {\n  override cause: BaseError\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<SendTransactionParameters, 'account' | 'chain'> & {\n      account: Account | null\n      chain?: Chain | undefined\n      docsPath?: string | undefined\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Request Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n      name: 'TransactionExecutionError',\n    })\n    this.cause = cause\n  }\n}\n\nexport type TransactionNotFoundErrorType = TransactionNotFoundError & {\n  name: 'TransactionNotFoundError'\n}\nexport class TransactionNotFoundError extends BaseError {\n  constructor({\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    index,\n  }: {\n    blockHash?: Hash | undefined\n    blockNumber?: bigint | undefined\n    blockTag?: BlockTag | undefined\n    hash?: Hash | undefined\n    index?: number | undefined\n  }) {\n    let identifier = 'Transaction'\n    if (blockTag && index !== undefined)\n      identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`\n    if (blockHash && index !== undefined)\n      identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`\n    if (blockNumber && index !== undefined)\n      identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`\n    if (hash) identifier = `Transaction with hash \"${hash}\"`\n    super(`${identifier} could not be found.`, {\n      name: 'TransactionNotFoundError',\n    })\n  }\n}\n\nexport type TransactionReceiptNotFoundErrorType =\n  TransactionReceiptNotFoundError & {\n    name: 'TransactionReceiptNotFoundError'\n  }\nexport class TransactionReceiptNotFoundError extends BaseError {\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`,\n      {\n        name: 'TransactionReceiptNotFoundError',\n      },\n    )\n  }\n}\n\nexport type WaitForTransactionReceiptTimeoutErrorType =\n  WaitForTransactionReceiptTimeoutError & {\n    name: 'WaitForTransactionReceiptTimeoutError'\n  }\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`,\n      { name: 'WaitForTransactionReceiptTimeoutError' },\n    )\n  }\n}\n", "/**\n * Internal assertion helpers.\n * @module\n */\n\n/** Asserts something is positive integer. */\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Hash interface. */\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Asserts something is hash */\nfunction ahash(h: Hash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, abytes, ahash, aexists, aoutput };\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n// Cast array to view\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): void {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash function */\nexport type CHash = ReturnType<typeof wrapConstructor>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { type Input, Hash, createView, toBytes } from './utils.js';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { type CHash, rotr, wrapConstructor } from './utils.js';\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import { BaseError } from './base.js'\n\nexport type InvalidAddressErrorType = InvalidAddressError & {\n  name: 'InvalidAddressError'\n}\nexport class InvalidAddressError extends BaseError {\n  constructor({ address }: { address: string }) {\n    super(`Address \"${address}\" is invalid.`, {\n      metaMessages: [\n        '- Address must be a hex value of 20 bytes (40 hex characters).',\n        '- Address must match its checksum counterpart.',\n      ],\n      name: 'InvalidAddressError',\n    })\n  }\n}\n", "import type { Chain } from '../types/chain.js'\n\nimport { BaseError } from './base.js'\n\nexport type ChainDoesNotSupportContractErrorType =\n  ChainDoesNotSupportContract & {\n    name: 'ChainDoesNotSupportContract'\n  }\nexport class ChainDoesNotSupportContract extends BaseError {\n  constructor({\n    blockNumber,\n    chain,\n    contract,\n  }: {\n    blockNumber?: bigint | undefined\n    chain: Chain\n    contract: { name: string; blockCreated?: number | undefined }\n  }) {\n    super(\n      `Chain \"${chain.name}\" does not support contract \"${contract.name}\".`,\n      {\n        metaMessages: [\n          'This could be due to any of the following:',\n          ...(blockNumber &&\n          contract.blockCreated &&\n          contract.blockCreated > blockNumber\n            ? [\n                `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`,\n              ]\n            : [\n                `- The chain does not have the contract \"${contract.name}\" configured.`,\n              ]),\n        ],\n        name: 'ChainDoesNotSupportContract',\n      },\n    )\n  }\n}\n\nexport type ChainMismatchErrorType = ChainMismatchError & {\n  name: 'ChainMismatchError'\n}\nexport class ChainMismatchError extends BaseError {\n  constructor({\n    chain,\n    currentChainId,\n  }: {\n    chain: Chain\n    currentChainId: number\n  }) {\n    super(\n      `The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} \u2013 ${chain.name}).`,\n      {\n        metaMessages: [\n          `Current Chain ID:  ${currentChainId}`,\n          `Expected Chain ID: ${chain.id} \u2013 ${chain.name}`,\n        ],\n        name: 'ChainMismatchError',\n      },\n    )\n  }\n}\n\nexport type ChainNotFoundErrorType = ChainNotFoundError & {\n  name: 'ChainNotFoundError'\n}\nexport class ChainNotFoundError extends BaseError {\n  constructor() {\n    super(\n      [\n        'No chain was provided to the request.',\n        'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.',\n      ].join('\\n'),\n      {\n        name: 'ChainNotFoundError',\n      },\n    )\n  }\n}\n\nexport type ClientChainNotConfiguredErrorType =\n  ClientChainNotConfiguredError & {\n    name: 'ClientChainNotConfiguredError'\n  }\nexport class ClientChainNotConfiguredError extends BaseError {\n  constructor() {\n    super('No chain was provided to the Client.', {\n      name: 'ClientChainNotConfiguredError',\n    })\n  }\n}\n\nexport type InvalidChainIdErrorType = InvalidChainIdError & {\n  name: 'InvalidChainIdError'\n}\nexport class InvalidChainIdError extends BaseError {\n  constructor({ chainId }: { chainId?: number | undefined }) {\n    super(\n      typeof chainId === 'number'\n        ? `Chain ID \"${chainId}\" is invalid.`\n        : 'Chain ID is invalid.',\n      { name: 'InvalidChainIdError' },\n    )\n  }\n}\n", "import { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\n/**\n * geth:    https://github.com/ethereum/go-ethereum/blob/master/core/error.go\n *          https://github.com/ethereum/go-ethereum/blob/master/core/types/transaction.go#L34-L41\n *\n * erigon:  https://github.com/ledgerwatch/erigon/blob/master/core/error.go\n *          https://github.com/ledgerwatch/erigon/blob/master/core/types/transaction.go#L41-L46\n *\n * anvil:   https://github.com/foundry-rs/foundry/blob/master/anvil/src/eth/error.rs#L108\n */\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\n  code: 3\n  name: 'ExecutionRevertedError'\n}\nexport class ExecutionRevertedError extends BaseError {\n  static code = 3\n  static nodeMessage = /execution reverted/\n\n  constructor({\n    cause,\n    message,\n  }: { cause?: BaseError | undefined; message?: string | undefined } = {}) {\n    const reason = message\n      ?.replace('execution reverted: ', '')\n      ?.replace('execution reverted', '')\n    super(\n      `Execution reverted ${\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\n      }.`,\n      {\n        cause,\n        name: 'ExecutionRevertedError',\n      },\n    )\n  }\n}\n\nexport type FeeCapTooHighErrorType = FeeCapTooHighError & {\n  name: 'FeeCapTooHighError'\n}\nexport class FeeCapTooHighError extends BaseError {\n  static nodeMessage =\n    /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\n  constructor({\n    cause,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`${\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n      {\n        cause,\n        name: 'FeeCapTooHighError',\n      },\n    )\n  }\n}\n\nexport type FeeCapTooLowErrorType = FeeCapTooLowError & {\n  name: 'FeeCapTooLowError'\n}\nexport class FeeCapTooLowError extends BaseError {\n  static nodeMessage =\n    /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\n  constructor({\n    cause,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`${\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ''\n      } gwei) cannot be lower than the block base fee.`,\n      {\n        cause,\n        name: 'FeeCapTooLowError',\n      },\n    )\n  }\n}\n\nexport type NonceTooHighErrorType = NonceTooHighError & {\n  name: 'NonceTooHighError'\n}\nexport class NonceTooHighError extends BaseError {\n  static nodeMessage = /nonce too high/\n  constructor({\n    cause,\n    nonce,\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\n    super(\n      `Nonce provided for the transaction ${\n        nonce ? `(${nonce}) ` : ''\n      }is higher than the next one expected.`,\n      { cause, name: 'NonceTooHighError' },\n    )\n  }\n}\n\nexport type NonceTooLowErrorType = NonceTooLowError & {\n  name: 'NonceTooLowError'\n}\nexport class NonceTooLowError extends BaseError {\n  static nodeMessage =\n    /nonce too low|transaction already imported|already known/\n  constructor({\n    cause,\n    nonce,\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\n    super(\n      [\n        `Nonce provided for the transaction ${\n          nonce ? `(${nonce}) ` : ''\n        }is lower than the current nonce of the account.`,\n        'Try increasing the nonce or find the latest nonce with `getTransactionCount`.',\n      ].join('\\n'),\n      { cause, name: 'NonceTooLowError' },\n    )\n  }\n}\n\nexport type NonceMaxValueErrorType = NonceMaxValueError & {\n  name: 'NonceMaxValueError'\n}\nexport class NonceMaxValueError extends BaseError {\n  static nodeMessage = /nonce has max value/\n  constructor({\n    cause,\n    nonce,\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\n    super(\n      `Nonce provided for the transaction ${\n        nonce ? `(${nonce}) ` : ''\n      }exceeds the maximum allowed nonce.`,\n      { cause, name: 'NonceMaxValueError' },\n    )\n  }\n}\n\nexport type InsufficientFundsErrorType = InsufficientFundsError & {\n  name: 'InsufficientFundsError'\n}\nexport class InsufficientFundsError extends BaseError {\n  static nodeMessage =\n    /insufficient funds|exceeds transaction sender account balance/\n  constructor({ cause }: { cause?: BaseError | undefined } = {}) {\n    super(\n      [\n        'The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.',\n      ].join('\\n'),\n      {\n        cause,\n        metaMessages: [\n          'This error could arise when the account does not have enough funds to:',\n          ' - pay for the total gas fee,',\n          ' - pay for the value to send.',\n          ' ',\n          'The cost of the transaction is calculated as `gas * gas fee + value`, where:',\n          ' - `gas` is the amount of gas needed for transaction to execute,',\n          ' - `gas fee` is the gas fee,',\n          ' - `value` is the amount of ether to send to the recipient.',\n        ],\n        name: 'InsufficientFundsError',\n      },\n    )\n  }\n}\n\nexport type IntrinsicGasTooHighErrorType = IntrinsicGasTooHighError & {\n  name: 'IntrinsicGasTooHighError'\n}\nexport class IntrinsicGasTooHighError extends BaseError {\n  static nodeMessage = /intrinsic gas too high|gas limit reached/\n  constructor({\n    cause,\n    gas,\n  }: { cause?: BaseError | undefined; gas?: bigint | undefined } = {}) {\n    super(\n      `The amount of gas ${\n        gas ? `(${gas}) ` : ''\n      }provided for the transaction exceeds the limit allowed for the block.`,\n      {\n        cause,\n        name: 'IntrinsicGasTooHighError',\n      },\n    )\n  }\n}\n\nexport type IntrinsicGasTooLowErrorType = IntrinsicGasTooLowError & {\n  name: 'IntrinsicGasTooLowError'\n}\nexport class IntrinsicGasTooLowError extends BaseError {\n  static nodeMessage = /intrinsic gas too low/\n  constructor({\n    cause,\n    gas,\n  }: { cause?: BaseError | undefined; gas?: bigint | undefined } = {}) {\n    super(\n      `The amount of gas ${\n        gas ? `(${gas}) ` : ''\n      }provided for the transaction is too low.`,\n      {\n        cause,\n        name: 'IntrinsicGasTooLowError',\n      },\n    )\n  }\n}\n\nexport type TransactionTypeNotSupportedErrorType =\n  TransactionTypeNotSupportedError & {\n    name: 'TransactionTypeNotSupportedError'\n  }\nexport class TransactionTypeNotSupportedError extends BaseError {\n  static nodeMessage = /transaction type not valid/\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super('The transaction type is not supported for this chain.', {\n      cause,\n      name: 'TransactionTypeNotSupportedError',\n    })\n  }\n}\n\nexport type TipAboveFeeCapErrorType = TipAboveFeeCapError & {\n  name: 'TipAboveFeeCapError'\n}\nexport class TipAboveFeeCapError extends BaseError {\n  static nodeMessage =\n    /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\n  constructor({\n    cause,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError | undefined\n    maxPriorityFeePerGas?: bigint | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      [\n        `The provided tip (\\`maxPriorityFeePerGas\\`${\n          maxPriorityFeePerGas\n            ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei`\n            : ''\n        }) cannot be higher than the fee cap (\\`maxFeePerGas\\`${\n          maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\n        }).`,\n      ].join('\\n'),\n      {\n        cause,\n        name: 'TipAboveFeeCapError',\n      },\n    )\n  }\n}\n\nexport type UnknownNodeErrorType = UnknownNodeError & {\n  name: 'UnknownNodeError'\n}\nexport class UnknownNodeError extends BaseError {\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(`An error occurred while executing: ${cause?.shortMessage}`, {\n      cause,\n      name: 'UnknownNodeError',\n    })\n  }\n}\n", "/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number\n\n  constructor(size: number) {\n    super()\n    this.maxSize = size\n  }\n\n  override get(key: string) {\n    const value = super.get(key)\n\n    if (super.has(key) && value !== undefined) {\n      this.delete(key)\n      super.set(key, value)\n    }\n\n    return value\n  }\n\n  override set(key: string, value: value) {\n    super.set(key, value)\n    if (this.maxSize && this.size > this.maxSize) {\n      const firstKey = this.keys().next().value\n      if (firstKey) this.delete(firstKey)\n    }\n    return this\n  }\n}\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { abytes, aexists, anumber, aoutput } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  byteSwap32,\n  Hash,\n  isLE,\n  toBytes,\n  u32,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  type CHash,\n  type CHashXO,\n  type HashXOF,\n  type Input,\n} from './utils.js';\n\n// Various per round constants calculations\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s: Uint32Array, rounds: number = 24): void {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta \u03B8\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (\u03C1) and Pi (\u03C0)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (\u03C7)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (\u03B9)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\n/** Keccak sponge function. */\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    anumber(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    // 0 < blockLen < 200\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak(): void {\n    if (!isLE) byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE) byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish(): void {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array): Uint8Array {\n    aoutput(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest(): Uint8Array {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\n/** SHA3-224 hash function. */\nexport const sha3_224: CHash = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256: CHash = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\n/** SHA3-384 hash function. */\nexport const sha3_384: CHash = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\n/** SHA3-512 hash function. */\nexport const sha3_512: CHash = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n\n/** keccak-224 hash function. */\nexport const keccak_224: CHash = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256: CHash = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\n/** keccak-384 hash function. */\nexport const keccak_384: CHash = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\n/** keccak-512 hash function. */\nexport const keccak_512: CHash = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128: CHashXO = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256: CHashXO = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n", "import { keccak_256 } from '@noble/hashes/sha3'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Keccak256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Keccak256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function keccak256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Keccak256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = keccak_256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Keccak256Hash<to>\n  return toHex(bytes) as Keccak256Hash<to>\n}\n", "import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { LruMap } from '../lru.js'\nimport { type IsAddressErrorType, isAddress } from './isAddress.js'\n\nconst checksumAddressCache = /*#__PURE__*/ new LruMap<Address>(8192)\n\nexport type ChecksumAddressErrorType =\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\nexport function checksumAddress(\n  address_: Address,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number | undefined,\n): Address {\n  if (checksumAddressCache.has(`${address_}.${chainId}`))\n    return checksumAddressCache.get(`${address_}.${chainId}`)!\n\n  const hexAddress = chainId\n    ? `${chainId}${address_.toLowerCase()}`\n    : address_.substring(2).toLowerCase()\n  const hash = keccak256(stringToBytes(hexAddress), 'bytes')\n\n  const address = (\n    chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress\n  ).split('')\n  for (let i = 0; i < 40; i += 2) {\n    if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n      address[i] = address[i].toUpperCase()\n    }\n    if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n      address[i + 1] = address[i + 1].toUpperCase()\n    }\n  }\n\n  const result = `0x${address.join('')}` as const\n  checksumAddressCache.set(`${address_}.${chainId}`, result)\n  return result\n}\n\nexport type GetAddressErrorType =\n  | ChecksumAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function getAddress(\n  address: string,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number,\n): Address {\n  if (!isAddress(address, { strict: false }))\n    throw new InvalidAddressError({ address })\n  return checksumAddress(address, chainId)\n}\n", "import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { LruMap } from '../lru.js'\nimport { checksumAddress } from './getAddress.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap<boolean>(8192)\n\nexport type IsAddressOptions = {\n  /**\n   * Enables strict mode. Whether or not to compare the address against its checksum.\n   *\n   * @default true\n   */\n  strict?: boolean | undefined\n}\n\nexport type IsAddressErrorType = ErrorType\n\nexport function isAddress(\n  address: string,\n  options?: IsAddressOptions | undefined,\n): address is Address {\n  const { strict = true } = options ?? {}\n  const cacheKey = `${address}.${strict}`\n\n  if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey)!\n\n  const result = (() => {\n    if (!addressRegex.test(address)) return false\n    if (address.toLowerCase() === address) return true\n    if (strict) return checksumAddress(address as Address) === address\n    return true\n  })()\n  isAddressCache.set(cacheKey, result)\n  return result\n}\n", "import {\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\nimport { type SizeErrorType, size } from './size.js'\n\nexport type SliceReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type SliceErrorType =\n  | IsHexErrorType\n  | SliceBytesErrorType\n  | SliceHexErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice<value extends ByteArray | Hex>(\n  value: value,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): SliceReturnType<value> {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value as Hex, start, end, {\n      strict,\n    }) as SliceReturnType<value>\n  return sliceBytes(value as ByteArray, start, end, {\n    strict,\n  }) as SliceReturnType<value>\n}\n\nexport type AssertStartOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertStartOffset(value: Hex | ByteArray, start?: number | undefined) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: size(value),\n    })\n}\n\nexport type AssertEndOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertEndOffset(\n  value: Hex | ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n) {\n  if (\n    typeof start === 'number' &&\n    typeof end === 'number' &&\n    size(value) !== end - start\n  ) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value),\n    })\n  }\n}\n\nexport type SliceBytesErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(\n  value_: ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): ByteArray {\n  assertStartOffset(value_, start)\n  const value = value_.slice(start, end)\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n\nexport type SliceHexErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(\n  value_: Hex,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): Hex {\n  assertStartOffset(value_, start)\n  const value = `0x${value_\n    .replace('0x', '')\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n", "import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../types.js'\n\nexport type ParseAccountErrorType = ErrorType\n\nexport function parseAccount<accountOrAddress extends Address | Account>(\n  account: accountOrAddress,\n): accountOrAddress extends Address ? Account : accountOrAddress {\n  if (typeof account === 'string')\n    return { address: account, type: 'json-rpc' } as any\n  return account as any\n}\n", "import type { StateMapping, StateOverride } from '../types/stateOverride.js'\nimport { BaseError } from './base.js'\n\nexport type AccountStateConflictErrorType = AccountStateConflictError & {\n  name: 'AccountStateConflictError'\n}\n\nexport class AccountStateConflictError extends BaseError {\n  constructor({ address }: { address: string }) {\n    super(`State for account \"${address}\" is set multiple times.`, {\n      name: 'AccountStateConflictError',\n    })\n  }\n}\n\nexport type StateAssignmentConflictErrorType = StateAssignmentConflictError & {\n  name: 'StateAssignmentConflictError'\n}\n\nexport class StateAssignmentConflictError extends BaseError {\n  constructor() {\n    super('state and stateDiff are set on the same account.', {\n      name: 'StateAssignmentConflictError',\n    })\n  }\n}\n\n/** @internal */\nexport function prettyStateMapping(stateMapping: StateMapping) {\n  return stateMapping.reduce((pretty, { slot, value }) => {\n    return `${pretty}        ${slot}: ${value}\\n`\n  }, '')\n}\n\nexport function prettyStateOverride(stateOverride: StateOverride) {\n  return stateOverride\n    .reduce((pretty, { address, ...state }) => {\n      let val = `${pretty}    ${address}:\\n`\n      if (state.nonce) val += `      nonce: ${state.nonce}\\n`\n      if (state.balance) val += `      balance: ${state.balance}\\n`\n      if (state.code) val += `      code: ${state.code}\\n`\n      if (state.state) {\n        val += '      state:\\n'\n        val += prettyStateMapping(state.state)\n      }\n      if (state.stateDiff) {\n        val += '      stateDiff:\\n'\n        val += prettyStateMapping(state.stateDiff)\n      }\n      return val\n    }, '  State Override:\\n')\n    .slice(0, -1)\n}\n", "import type { Abi, Address } from 'abitype'\n\nimport { parseAccount } from '../accounts/utils/parseAccount.js'\nimport type { CallParameters } from '../actions/public/call.js'\nimport { panicReasons } from '../constants/solidity.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\nimport {\n  type DecodeErrorResultReturnType,\n  decodeErrorResult,\n} from '../utils/abi/decodeErrorResult.js'\nimport { formatAbiItem } from '../utils/abi/formatAbiItem.js'\nimport { formatAbiItemWithArgs } from '../utils/abi/formatAbiItemWithArgs.js'\nimport { getAbiItem } from '../utils/abi/getAbiItem.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { AbiErrorSignatureNotFoundError } from './abi.js'\nimport { BaseError } from './base.js'\nimport { prettyStateOverride } from './stateOverride.js'\nimport { prettyPrint } from './transaction.js'\nimport { getContractAddress } from './utils.js'\n\nexport type CallExecutionErrorType = CallExecutionError & {\n  name: 'CallExecutionError'\n}\nexport class CallExecutionError extends BaseError {\n  override cause: BaseError\n\n  constructor(\n    cause: BaseError,\n    {\n      account: account_,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      stateOverride,\n    }: CallParameters & {\n      chain?: Chain | undefined\n      docsPath?: string | undefined\n    },\n  ) {\n    const account = account_ ? parseAccount(account_) : undefined\n    let prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    if (stateOverride) {\n      prettyArgs += `\\n${prettyStateOverride(stateOverride)}`\n    }\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Raw Call Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n      name: 'CallExecutionError',\n    })\n    this.cause = cause\n  }\n}\n\nexport type ContractFunctionExecutionErrorType =\n  ContractFunctionExecutionError & {\n    name: 'ContractFunctionExecutionError'\n  }\nexport class ContractFunctionExecutionError extends BaseError {\n  abi: Abi\n  args?: unknown[] | undefined\n  override cause: BaseError\n  contractAddress?: Address | undefined\n  formattedArgs?: string | undefined\n  functionName: string\n  sender?: Address | undefined\n\n  constructor(\n    cause: BaseError,\n    {\n      abi,\n      args,\n      contractAddress,\n      docsPath,\n      functionName,\n      sender,\n    }: {\n      abi: Abi\n      args?: any | undefined\n      contractAddress?: Address | undefined\n      docsPath?: string | undefined\n      functionName: string\n      sender?: Address | undefined\n    },\n  ) {\n    const abiItem = getAbiItem({ abi, args, name: functionName })\n    const formattedArgs = abiItem\n      ? formatAbiItemWithArgs({\n          abiItem,\n          args,\n          includeFunctionName: false,\n          includeName: false,\n        })\n      : undefined\n    const functionWithParams = abiItem\n      ? formatAbiItem(abiItem, { includeName: true })\n      : undefined\n\n    const prettyArgs = prettyPrint({\n      address: contractAddress && getContractAddress(contractAddress),\n      function: functionWithParams,\n      args:\n        formattedArgs &&\n        formattedArgs !== '()' &&\n        `${[...Array(functionName?.length ?? 0).keys()]\n          .map(() => ' ')\n          .join('')}${formattedArgs}`,\n      sender,\n    })\n\n    super(\n      cause.shortMessage ||\n        `An unknown error occurred while executing the contract function \"${functionName}\".`,\n      {\n        cause,\n        docsPath,\n        metaMessages: [\n          ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n          prettyArgs && 'Contract Call:',\n          prettyArgs,\n        ].filter(Boolean) as string[],\n        name: 'ContractFunctionExecutionError',\n      },\n    )\n    this.abi = abi\n    this.args = args\n    this.cause = cause\n    this.contractAddress = contractAddress\n    this.functionName = functionName\n    this.sender = sender\n  }\n}\n\nexport type ContractFunctionRevertedErrorType =\n  ContractFunctionRevertedError & {\n    name: 'ContractFunctionRevertedError'\n  }\nexport class ContractFunctionRevertedError extends BaseError {\n  data?: DecodeErrorResultReturnType | undefined\n  raw?: Hex | undefined\n  reason?: string | undefined\n  signature?: Hex | undefined\n\n  constructor({\n    abi,\n    data,\n    functionName,\n    message,\n  }: {\n    abi: Abi\n    data?: Hex | undefined\n    functionName: string\n    message?: string | undefined\n  }) {\n    let cause: Error | undefined\n    let decodedData: DecodeErrorResultReturnType | undefined = undefined\n    let metaMessages: string[] | undefined\n    let reason: string | undefined\n    if (data && data !== '0x') {\n      try {\n        decodedData = decodeErrorResult({ abi, data })\n        const { abiItem, errorName, args: errorArgs } = decodedData\n        if (errorName === 'Error') {\n          reason = (errorArgs as [string])[0]\n        } else if (errorName === 'Panic') {\n          const [firstArg] = errorArgs as [number]\n          reason = panicReasons[firstArg as keyof typeof panicReasons]\n        } else {\n          const errorWithParams = abiItem\n            ? formatAbiItem(abiItem, { includeName: true })\n            : undefined\n          const formattedArgs =\n            abiItem && errorArgs\n              ? formatAbiItemWithArgs({\n                  abiItem,\n                  args: errorArgs,\n                  includeFunctionName: false,\n                  includeName: false,\n                })\n              : undefined\n\n          metaMessages = [\n            errorWithParams ? `Error: ${errorWithParams}` : '',\n            formattedArgs && formattedArgs !== '()'\n              ? `       ${[...Array(errorName?.length ?? 0).keys()]\n                  .map(() => ' ')\n                  .join('')}${formattedArgs}`\n              : '',\n          ]\n        }\n      } catch (err) {\n        cause = err as Error\n      }\n    } else if (message) reason = message\n\n    let signature: Hex | undefined\n    if (cause instanceof AbiErrorSignatureNotFoundError) {\n      signature = cause.signature\n      metaMessages = [\n        `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ]\n    }\n\n    super(\n      (reason && reason !== 'execution reverted') || signature\n        ? [\n            `The contract function \"${functionName}\" reverted with the following ${\n              signature ? 'signature' : 'reason'\n            }:`,\n            reason || signature,\n          ].join('\\n')\n        : `The contract function \"${functionName}\" reverted.`,\n      {\n        cause,\n        metaMessages,\n        name: 'ContractFunctionRevertedError',\n      },\n    )\n\n    this.data = decodedData\n    this.raw = data\n    this.reason = reason\n    this.signature = signature\n  }\n}\n\nexport type ContractFunctionZeroDataErrorType =\n  ContractFunctionZeroDataError & {\n    name: 'ContractFunctionZeroDataError'\n  }\nexport class ContractFunctionZeroDataError extends BaseError {\n  constructor({ functionName }: { functionName: string }) {\n    super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\n      metaMessages: [\n        'This could be due to any of the following:',\n        `  - The contract does not have the function \"${functionName}\",`,\n        '  - The parameters passed to the contract function may be invalid, or',\n        '  - The address is not a contract.',\n      ],\n      name: 'ContractFunctionZeroDataError',\n    })\n  }\n}\n\nexport type CounterfactualDeploymentFailedErrorType =\n  CounterfactualDeploymentFailedError & {\n    name: 'CounterfactualDeploymentFailedError'\n  }\nexport class CounterfactualDeploymentFailedError extends BaseError {\n  constructor({ factory }: { factory?: Address | undefined }) {\n    super(\n      `Deployment for counterfactual contract call failed${\n        factory ? ` for factory \"${factory}\".` : ''\n      }`,\n      {\n        metaMessages: [\n          'Please ensure:',\n          '- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).',\n          '- The `factoryData` is a valid encoded function call for contract deployment function on the factory.',\n        ],\n        name: 'CounterfactualDeploymentFailedError',\n      },\n    )\n  }\n}\n\nexport type RawContractErrorType = RawContractError & {\n  name: 'RawContractError'\n}\nexport class RawContractError extends BaseError {\n  code = 3\n\n  data?: Hex | { data?: Hex | undefined } | undefined\n\n  constructor({\n    data,\n    message,\n  }: {\n    data?: Hex | { data?: Hex | undefined } | undefined\n    message?: string | undefined\n  }) {\n    super(message || '', { name: 'RawContractError' })\n    this.data = data\n  }\n}\n", "import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ExecutionRevertedError,\n  type ExecutionRevertedErrorType,\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  FeeCapTooLowError,\n  type FeeCapTooLowErrorType,\n  InsufficientFundsError,\n  type InsufficientFundsErrorType,\n  IntrinsicGasTooHighError,\n  type IntrinsicGasTooHighErrorType,\n  IntrinsicGasTooLowError,\n  type IntrinsicGasTooLowErrorType,\n  NonceMaxValueError,\n  type NonceMaxValueErrorType,\n  NonceTooHighError,\n  type NonceTooHighErrorType,\n  NonceTooLowError,\n  type NonceTooLowErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n  TransactionTypeNotSupportedError,\n  type TransactionTypeNotSupportedErrorType,\n  UnknownNodeError,\n  type UnknownNodeErrorType,\n} from '../../errors/node.js'\nimport { RpcRequestError } from '../../errors/request.js'\nimport {\n  InvalidInputRpcError,\n  TransactionRejectedRpcError,\n} from '../../errors/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\n\nexport function containsNodeError(err: BaseError) {\n  return (\n    err instanceof TransactionRejectedRpcError ||\n    err instanceof InvalidInputRpcError ||\n    (err instanceof RpcRequestError && err.code === ExecutionRevertedError.code)\n  )\n}\n\nexport type GetNodeErrorParameters = ExactPartial<\n  SendTransactionParameters<any>\n>\n\nexport type GetNodeErrorReturnType =\n  | ExecutionRevertedErrorType\n  | FeeCapTooHighErrorType\n  | FeeCapTooLowErrorType\n  | NonceTooHighErrorType\n  | NonceTooLowErrorType\n  | NonceMaxValueErrorType\n  | InsufficientFundsErrorType\n  | IntrinsicGasTooHighErrorType\n  | IntrinsicGasTooLowErrorType\n  | TransactionTypeNotSupportedErrorType\n  | TipAboveFeeCapErrorType\n  | UnknownNodeErrorType\n\nexport function getNodeError(\n  err: BaseError,\n  args: GetNodeErrorParameters,\n): GetNodeErrorReturnType {\n  const message = (err.details || '').toLowerCase()\n\n  const executionRevertedError =\n    err instanceof BaseError\n      ? err.walk(\n          (e) =>\n            (e as { code: number } | null | undefined)?.code ===\n            ExecutionRevertedError.code,\n        )\n      : err\n  if (executionRevertedError instanceof BaseError)\n    return new ExecutionRevertedError({\n      cause: err,\n      message: executionRevertedError.details,\n    }) as any\n  if (ExecutionRevertedError.nodeMessage.test(message))\n    return new ExecutionRevertedError({\n      cause: err,\n      message: err.details,\n    }) as any\n  if (FeeCapTooHighError.nodeMessage.test(message))\n    return new FeeCapTooHighError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (FeeCapTooLowError.nodeMessage.test(message))\n    return new FeeCapTooLowError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (NonceTooHighError.nodeMessage.test(message))\n    return new NonceTooHighError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceTooLowError.nodeMessage.test(message))\n    return new NonceTooLowError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceMaxValueError.nodeMessage.test(message))\n    return new NonceMaxValueError({ cause: err, nonce: args?.nonce }) as any\n  if (InsufficientFundsError.nodeMessage.test(message))\n    return new InsufficientFundsError({ cause: err }) as any\n  if (IntrinsicGasTooHighError.nodeMessage.test(message))\n    return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas }) as any\n  if (IntrinsicGasTooLowError.nodeMessage.test(message))\n    return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas }) as any\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n    return new TransactionTypeNotSupportedError({ cause: err }) as any\n  if (TipAboveFeeCapError.nodeMessage.test(message))\n    return new TipAboveFeeCapError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n      maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\n    }) as any\n  return new UnknownNodeError({\n    cause: err,\n  }) as any\n}\n", "import type { CallParameters } from '../../actions/public/call.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  CallExecutionError,\n  type CallExecutionErrorType,\n} from '../../errors/contract.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetCallErrorReturnType<cause = ErrorType> = Omit<\n  CallExecutionErrorType,\n  'cause'\n> & {\n  cause: cause | GetNodeErrorReturnType\n}\n\nexport function getCallError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: CallParameters & {\n    chain?: Chain | undefined\n    docsPath?: string | undefined\n  },\n): GetCallErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetCallErrorReturnType<err>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ChainFormatter } from '../../types/chain.js'\n\nexport type ExtractErrorType = ErrorType\n\n/**\n * @description Picks out the keys from `value` that exist in the formatter..\n */\nexport function extract(\n  value_: Record<string, unknown>,\n  { format }: { format?: ChainFormatter['format'] | undefined },\n) {\n  if (!format) return {}\n\n  const value: Record<string, unknown> = {}\n  function extract_(formatted: Record<string, any>) {\n    const keys = Object.keys(formatted)\n    for (const key of keys) {\n      if (key in value_) value[key] = value_[key]\n      if (\n        formatted[key] &&\n        typeof formatted[key] === 'object' &&\n        !Array.isArray(formatted[key])\n      )\n        extract_(formatted[key])\n    }\n  }\n\n  const formatted = format(value_ || {})\n  extract_(formatted)\n\n  return value\n}\n", "import {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport { maxUint256 } from '../../constants/number.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport {\n  FeeConflictError,\n  type FeeConflictErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../address/isAddress.js'\n\nexport type AssertRequestParameters = ExactPartial<\n  SendTransactionParameters<Chain>\n>\n\nexport type AssertRequestErrorType =\n  | InvalidAddressErrorType\n  | FeeConflictErrorType\n  | FeeCapTooHighErrorType\n  | ParseAccountErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertRequest(args: AssertRequestParameters) {\n  const {\n    account: account_,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n  if (account && !isAddress(account.address))\n    throw new InvalidAddressError({ address: account.address })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (\n    typeof gasPrice !== 'undefined' &&\n    (typeof maxFeePerGas !== 'undefined' ||\n      typeof maxPriorityFeePerGas !== 'undefined')\n  )\n    throw new FeeConflictError()\n\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n", "import { config } from './constants/config';\nimport {\n  ConceroNetwork,\n  conceroNetworks,\n  testnetNetworks,\n  mainnetNetworks,\n  type ConceroMainnetNetworkNames,\n  type ConceroTestnetNetworkNames,\n  type NetworkEnvKeys,\n} from './networks';\nimport { networkEnvKeys, networkTypes, type NetworkType } from './networks';\n\nexport { ConceroNetwork, conceroNetworks, testnetNetworks, mainnetNetworks, config, networkTypes, networkEnvKeys };\nexport type {\n  ConceroMainnetNetworkNames,\n  ConceroTestnetNetworkNames,\n  NetworkType,\n  NetworkEnvKeys,\n};\n", "export const config = {\n  DEFAULT_BLOCK_CONFIRMATIONS: 2,\n};\n", "import type { Chain, ChainFormatters } from '../../types/chain.js'\nimport type { Assign, Prettify } from '../../types/utils.js'\n\nexport function defineChain<\n  formatters extends ChainFormatters,\n  const chain extends Chain<formatters>,\n>(chain: chain): Prettify<Assign<Chain<undefined>, chain>> {\n  return {\n    formatters: undefined,\n    fees: undefined,\n    serializers: undefined,\n    ...chain,\n  } as Assign<Chain<undefined>, chain>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Block, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { type FormattedTransaction, formatTransaction } from './transaction.js'\n\ntype BlockPendingDependencies = 'hash' | 'logsBloom' | 'nonce' | 'number'\n\nexport type FormattedBlock<\n  chain extends Chain | undefined = undefined,\n  includeTransactions extends boolean = boolean,\n  blockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    chain,\n    'block',\n    Block<bigint, includeTransactions>\n  >,\n  _ExcludedPendingDependencies extends string = BlockPendingDependencies &\n    ExtractChainFormatterExclude<chain, 'block'>,\n  _Formatted = Omit<_FormatterReturnType, BlockPendingDependencies> & {\n    [_key in _ExcludedPendingDependencies]: never\n  } & Pick<\n      Block<bigint, includeTransactions, blockTag>,\n      BlockPendingDependencies\n    >,\n  _Transactions = includeTransactions extends true\n    ? Prettify<FormattedTransaction<chain, blockTag>>[]\n    : Hash[],\n> = Omit<_Formatted, 'transactions'> & {\n  transactions: _Transactions\n}\n\nexport type FormatBlockErrorType = ErrorType\n\nexport function formatBlock(block: ExactPartial<RpcBlock>) {\n  const transactions = (block.transactions ?? []).map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return formatTransaction(transaction)\n  })\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas\n      ? BigInt(block.excessBlobGas)\n      : undefined,\n    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n    hash: block.hash ? block.hash : null,\n    logsBloom: block.logsBloom ? block.logsBloom : null,\n    nonce: block.nonce ? block.nonce : null,\n    number: block.number ? BigInt(block.number) : null,\n    size: block.size ? BigInt(block.size) : undefined,\n    timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n    transactions,\n    totalDifficulty: block.totalDifficulty\n      ? BigInt(block.totalDifficulty)\n      : null,\n  } as Block\n}\n\nexport type DefineBlockErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock)\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { SignedAuthorizationList } from '../../types/authorization.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcAuthorizationList, RpcTransaction } from '../../types/rpc.js'\nimport type { Transaction, TransactionType } from '../../types/transaction.js'\nimport type { ExactPartial, UnionLooseOmit } from '../../types/utils.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\n\ntype TransactionPendingDependencies =\n  | 'blockHash'\n  | 'blockNumber'\n  | 'transactionIndex'\n\nexport type FormattedTransaction<\n  chain extends Chain | undefined = undefined,\n  blockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    chain,\n    'transaction',\n    Transaction\n  >,\n  _ExcludedPendingDependencies extends string = TransactionPendingDependencies &\n    ExtractChainFormatterExclude<chain, 'transaction'>,\n> = UnionLooseOmit<_FormatterReturnType, TransactionPendingDependencies> & {\n  [_K in _ExcludedPendingDependencies]: never\n} & Pick<\n    Transaction<bigint, number, blockTag extends 'pending' ? true : false>,\n    TransactionPendingDependencies\n  >\n\nexport const transactionType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702',\n} as const satisfies Record<Hex, TransactionType>\n\nexport type FormatTransactionErrorType = ErrorType\n\nexport function formatTransaction(transaction: ExactPartial<RpcTransaction>) {\n  const transaction_ = {\n    ...transaction,\n    blockHash: transaction.blockHash ? transaction.blockHash : null,\n    blockNumber: transaction.blockNumber\n      ? BigInt(transaction.blockNumber)\n      : null,\n    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : undefined,\n    gas: transaction.gas ? BigInt(transaction.gas) : undefined,\n    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : undefined,\n    maxFeePerBlobGas: transaction.maxFeePerBlobGas\n      ? BigInt(transaction.maxFeePerBlobGas)\n      : undefined,\n    maxFeePerGas: transaction.maxFeePerGas\n      ? BigInt(transaction.maxFeePerGas)\n      : undefined,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n      ? BigInt(transaction.maxPriorityFeePerGas)\n      : undefined,\n    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : undefined,\n    to: transaction.to ? transaction.to : null,\n    transactionIndex: transaction.transactionIndex\n      ? Number(transaction.transactionIndex)\n      : null,\n    type: transaction.type\n      ? (transactionType as any)[transaction.type]\n      : undefined,\n    typeHex: transaction.type ? transaction.type : undefined,\n    value: transaction.value ? BigInt(transaction.value) : undefined,\n    v: transaction.v ? BigInt(transaction.v) : undefined,\n  } as Transaction\n\n  if (transaction.authorizationList)\n    transaction_.authorizationList = formatAuthorizationList(\n      transaction.authorizationList,\n    )\n\n  transaction_.yParity = (() => {\n    // If `yParity` is provided, we will use it.\n    if (transaction.yParity) return Number(transaction.yParity)\n\n    // If no `yParity` provided, try derive from `v`.\n    if (typeof transaction_.v === 'bigint') {\n      if (transaction_.v === 0n || transaction_.v === 27n) return 0\n      if (transaction_.v === 1n || transaction_.v === 28n) return 1\n      if (transaction_.v >= 35n) return transaction_.v % 2n === 0n ? 1 : 0\n    }\n\n    return undefined\n  })()\n\n  if (transaction_.type === 'legacy') {\n    delete transaction_.accessList\n    delete transaction_.maxFeePerBlobGas\n    delete transaction_.maxFeePerGas\n    delete transaction_.maxPriorityFeePerGas\n    delete transaction_.yParity\n  }\n  if (transaction_.type === 'eip2930') {\n    delete transaction_.maxFeePerBlobGas\n    delete transaction_.maxFeePerGas\n    delete transaction_.maxPriorityFeePerGas\n  }\n  if (transaction_.type === 'eip1559') {\n    delete transaction_.maxFeePerBlobGas\n  }\n  return transaction_\n}\n\nexport type DefineTransactionErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineTransaction = /*#__PURE__*/ defineFormatter(\n  'transaction',\n  formatTransaction,\n)\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction formatAuthorizationList(\n  authorizationList: RpcAuthorizationList,\n): SignedAuthorizationList {\n  return authorizationList.map((authorization) => ({\n    address: (authorization as any).address,\n    chainId: Number(authorization.chainId),\n    nonce: Number(authorization.nonce),\n    r: authorization.r,\n    s: authorization.s,\n    yParity: Number(authorization.yParity),\n  })) as SignedAuthorizationList\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Log } from '../../types/log.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\n\nexport type FormatLogErrorType = ErrorType\n\nexport function formatLog(\n  log: ExactPartial<RpcLog>,\n  {\n    args,\n    eventName,\n  }: { args?: unknown | undefined; eventName?: string | undefined } = {},\n) {\n  return {\n    ...log,\n    blockHash: log.blockHash ? log.blockHash : null,\n    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n    logIndex: log.logIndex ? Number(log.logIndex) : null,\n    transactionHash: log.transactionHash ? log.transactionHash : null,\n    transactionIndex: log.transactionIndex\n      ? Number(log.transactionIndex)\n      : null,\n    ...(eventName ? { args, eventName } : {}),\n  } as Log\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  Chain,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\nimport type { TransactionReceipt } from '../../types/transaction.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { formatLog } from './log.js'\nimport { transactionType } from './transaction.js'\n\nexport type FormattedTransactionReceipt<\n  chain extends Chain | undefined = undefined,\n> = ExtractChainFormatterReturnType<\n  chain,\n  'transactionReceipt',\n  TransactionReceipt\n>\n\nexport const receiptStatuses = {\n  '0x0': 'reverted',\n  '0x1': 'success',\n} as const\n\nexport type FormatTransactionReceiptErrorType = ErrorType\n\nexport function formatTransactionReceipt(\n  transactionReceipt: ExactPartial<RpcTransactionReceipt>,\n) {\n  const receipt = {\n    ...transactionReceipt,\n    blockNumber: transactionReceipt.blockNumber\n      ? BigInt(transactionReceipt.blockNumber)\n      : null,\n    contractAddress: transactionReceipt.contractAddress\n      ? transactionReceipt.contractAddress\n      : null,\n    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\n      ? BigInt(transactionReceipt.cumulativeGasUsed)\n      : null,\n    effectiveGasPrice: transactionReceipt.effectiveGasPrice\n      ? BigInt(transactionReceipt.effectiveGasPrice)\n      : null,\n    gasUsed: transactionReceipt.gasUsed\n      ? BigInt(transactionReceipt.gasUsed)\n      : null,\n    logs: transactionReceipt.logs\n      ? transactionReceipt.logs.map((log) => formatLog(log))\n      : null,\n    to: transactionReceipt.to ? transactionReceipt.to : null,\n    transactionIndex: transactionReceipt.transactionIndex\n      ? hexToNumber(transactionReceipt.transactionIndex)\n      : null,\n    status: transactionReceipt.status\n      ? receiptStatuses[transactionReceipt.status]\n      : null,\n    type: transactionReceipt.type\n      ? transactionType[\n          transactionReceipt.type as keyof typeof transactionType\n        ] || transactionReceipt.type\n      : null,\n  } as TransactionReceipt\n\n  if (transactionReceipt.blobGasPrice)\n    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice)\n  if (transactionReceipt.blobGasUsed)\n    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed)\n\n  return receipt\n}\n\nexport type DefineTransactionReceiptErrorType =\n  | DefineFormatterErrorType\n  | ErrorType\n\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter(\n  'transactionReceipt',\n  formatTransactionReceipt,\n)\n", "import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CreateCursorErrorType,\n  type Cursor,\n  createCursor,\n} from '../cursor.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type RecursiveArray<T> = T | readonly RecursiveArray<T>[]\n\ntype To = 'hex' | 'bytes'\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor): void\n}\n\nexport type ToRlpReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type ToRlpErrorType =\n  | CreateCursorErrorType\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\nexport function toRlp<to extends To = 'hex'>(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  const encodable = getEncodable(bytes)\n  const cursor = createCursor(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (to === 'hex') return bytesToHex(cursor.bytes) as ToRlpReturnType<to>\n  return cursor.bytes as ToRlpReturnType<to>\n}\n\nexport type BytesToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function bytesToRlp<to extends To = 'bytes'>(\n  bytes: RecursiveArray<ByteArray>,\n  to: to | To | undefined = 'bytes',\n): ToRlpReturnType<to> {\n  return toRlp(bytes, to)\n}\n\nexport type HexToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function hexToRlp<to extends To = 'hex'>(\n  hex: RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  return toRlp(hex, to)\n}\n\nfunction getEncodable(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes as any)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: ByteArray | Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0] < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bytes.length === 1 && bytes[0] < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new BaseError('Length is too large.')\n}\n", "import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ByteArray,\n  Hex,\n  Signature,\n  SignatureLegacy,\n} from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type SerializeAuthorizationListErrorType,\n  serializeAuthorizationList,\n} from '../authorization/serializeAuthorizationList.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from '../blob/blobsToCommitments.js'\nimport {\n  blobsToProofs,\n  type blobsToProofsErrorType,\n} from '../blob/blobsToProofs.js'\nimport {\n  type CommitmentsToVersionedHashesErrorType,\n  commitmentsToVersionedHashes,\n} from '../blob/commitmentsToVersionedHashes.js'\nimport {\n  type ToBlobSidecarsErrorType,\n  toBlobSidecars,\n} from '../blob/toBlobSidecars.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport { type ToHexErrorType, bytesToHex, toHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionEIP7702ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionEIP7702,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransactionTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  transaction extends TransactionSerializable = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n> = TransactionSerialized<_transactionType>\n\nexport type SerializeTransactionFn<\n  transaction extends TransactionSerializableGeneric = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = never,\n> = typeof serializeTransaction<\n  OneOf<TransactionSerializable | transaction>,\n  _transactionType\n>\n\nexport type SerializeTransactionErrorType =\n  | GetTransactionTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionEIP4844ErrorType\n  | SerializeTransactionEIP7702ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  transaction: transaction,\n  signature?: Signature | undefined,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip4844')\n    return serializeTransactionEIP4844(\n      transaction as TransactionSerializableEIP4844,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip7702')\n    return serializeTransactionEIP7702(\n      transaction as TransactionSerializableEIP7702,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature as SignatureLegacy,\n  ) as SerializedTransactionReturnType<transaction>\n}\n\ntype SerializeTransactionEIP7702ErrorType =\n  | AssertTransactionEIP7702ErrorType\n  | SerializeAuthorizationListErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP7702 {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP7702(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n  const serializedAuthorizationList =\n    serializeAuthorizationList(authorizationList)\n\n  return concatHex([\n    '0x04',\n    toRlp([\n      toHex(chainId),\n      nonce ? toHex(nonce) : '0x',\n      maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n      maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n      gas ? toHex(gas) : '0x',\n      to ?? '0x',\n      value ? toHex(value) : '0x',\n      data ?? '0x',\n      serializedAccessList,\n      serializedAuthorizationList,\n      ...toYParitySignatureArray(transaction, signature),\n    ]),\n  ]) as TransactionSerializedEIP7702\n}\n\ntype SerializeTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | BlobsToCommitmentsErrorType\n  | CommitmentsToVersionedHashesErrorType\n  | blobsToProofsErrorType\n  | ToBlobSidecarsErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP4844 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP4844(transaction)\n\n  let blobVersionedHashes = transaction.blobVersionedHashes\n  let sidecars = transaction.sidecars\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (\n    transaction.blobs &&\n    (typeof blobVersionedHashes === 'undefined' ||\n      typeof sidecars === 'undefined')\n  ) {\n    const blobs = (\n      typeof transaction.blobs[0] === 'string'\n        ? transaction.blobs\n        : (transaction.blobs as ByteArray[]).map((x) => bytesToHex(x))\n    ) as Hex[]\n    const kzg = transaction.kzg!\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg,\n    })\n\n    if (typeof blobVersionedHashes === 'undefined')\n      blobVersionedHashes = commitmentsToVersionedHashes({\n        commitments,\n      })\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      sidecars = toBlobSidecars({ blobs, commitments, proofs })\n    }\n  }\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...toYParitySignatureArray(transaction, signature),\n  ] as const\n\n  const blobs: Hex[] = []\n  const commitments: Hex[] = []\n  const proofs: Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return concatHex([\n    '0x03',\n    sidecars\n      ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n        toRlp([serializedTransaction, blobs, commitments, proofs])\n      : // If sidecars are disabled, standard envelope is used:\n        toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP4844\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: SignatureLegacy | undefined,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    const r = trim(signature.r)\n    const s = trim(signature.s)\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v),\n      r === '0x00' ? '0x' : r,\n      s === '0x00' ? '0x' : s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy\n}\n\nexport function toYParitySignatureArray(\n  transaction: TransactionSerializableGeneric,\n  signature_?: Signature | undefined,\n) {\n  const signature = signature_ ?? transaction\n  const { v, yParity } = signature\n\n  if (typeof signature.r === 'undefined') return []\n  if (typeof signature.s === 'undefined') return []\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return []\n\n  const r = trim(signature.r)\n  const s = trim(signature.s)\n\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? toHex(1) : '0x'\n    if (v === 0n) return '0x'\n    if (v === 1n) return toHex(1)\n\n    return v === 27n ? '0x' : toHex(1)\n  })()\n\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s]\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AuthorizationList,\n  SerializedAuthorizationList,\n} from '../../types/authorization.js'\nimport { toHex } from '../encoding/toHex.js'\nimport { toYParitySignatureArray } from '../transaction/serializeTransaction.js'\n\nexport type SerializeAuthorizationListReturnType = SerializedAuthorizationList\n\nexport type SerializeAuthorizationListErrorType = ErrorType\n\n/*\n * Serializes an EIP-7702 authorization list.\n */\nexport function serializeAuthorizationList(\n  authorizationList?: AuthorizationList<number, true> | undefined,\n): SerializeAuthorizationListReturnType {\n  if (!authorizationList || authorizationList.length === 0) return []\n\n  const serializedAuthorizationList = []\n  for (const authorization of authorizationList) {\n    const { chainId, nonce, ...signature } = authorization\n    const contractAddress = authorization.address\n    serializedAuthorizationList.push([\n      chainId ? toHex(chainId) : '0x',\n      contractAddress,\n      nonce ? toHex(nonce) : '0x',\n      ...toYParitySignatureArray({}, signature),\n    ])\n  }\n\n  return serializedAuthorizationList as {} as SerializeAuthorizationListReturnType\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type BlobsToCommitmentsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[] =\n    | readonly ByteArray[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Blobs to transform into commitments. */\n  blobs: blobs | readonly ByteArray[] | readonly Hex[]\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'blobToKzgCommitment'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type BlobsToCommitmentsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type BlobsToCommitmentsErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Compute commitments from a list of blobs.\n *\n * @example\n * ```ts\n * import { blobsToCommitments, toBlobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * ```\n */\nexport function blobsToCommitments<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: BlobsToCommitmentsParameters<blobs, to>,\n): BlobsToCommitmentsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n\n  const commitments: ByteArray[] = []\n  for (const blob of blobs)\n    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)))\n\n  return (to === 'bytes'\n    ? commitments\n    : commitments.map((x) =>\n        bytesToHex(x),\n      )) as {} as BlobsToCommitmentsReturnType<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type blobsToProofsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[],\n  commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Blobs to transform into proofs. */\n  blobs: blobs\n  /** Commitments for the blobs. */\n  commitments: commitments &\n    (commitments extends _blobsType\n      ? {}\n      : `commitments must be the same type as blobs`)\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'computeBlobKzgProof'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type blobsToProofsReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray[] : never)\n  | (to extends 'hex' ? Hex[] : never)\n\nexport type blobsToProofsErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Compute the proofs for a list of blobs and their commitments.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n * ```\n */\nexport function blobsToProofs<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  const commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: blobsToProofsParameters<blobs, commitments, to>,\n): blobsToProofsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n  const commitments = (\n    typeof parameters.commitments[0] === 'string'\n      ? parameters.commitments.map((x) => hexToBytes(x as any))\n      : parameters.commitments\n  ) as ByteArray[]\n\n  const proofs: ByteArray[] = []\n  for (let i = 0; i < blobs.length; i++) {\n    const blob = blobs[i]\n    const commitment = commitments[i]\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)))\n  }\n\n  return (to === 'bytes'\n    ? proofs\n    : proofs.map((x) => bytesToHex(x))) as {} as blobsToProofsReturnType<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Sha256ErrorType, sha256 } from '../hash/sha256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentToVersionedHashParameters<\n  commitment extends Uint8Array | Hex = Uint8Array | Hex,\n  to extends To | undefined = undefined,\n> = {\n  /** Commitment from blob. */\n  commitment: commitment | Uint8Array | Hex\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hash. */\n  version?: number | undefined\n}\n\nexport type CommitmentToVersionedHashReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type CommitmentToVersionedHashErrorType =\n  | Sha256ErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash<\n  const commitment extends Hex | ByteArray,\n  to extends To =\n    | (commitment extends Hex ? 'hex' : never)\n    | (commitment extends ByteArray ? 'bytes' : never),\n>(\n  parameters: CommitmentToVersionedHashParameters<commitment, to>,\n): CommitmentToVersionedHashReturnType<to> {\n  const { commitment, version = 1 } = parameters\n  const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes')\n\n  const versionedHash = sha256(commitment, 'bytes')\n  versionedHash.set([version], 0)\n  return (\n    to === 'bytes' ? versionedHash : bytesToHex(versionedHash)\n  ) as CommitmentToVersionedHashReturnType<to>\n}\n", "import { sha256 as noble_sha256 } from '@noble/hashes/sha256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Sha256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Sha256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function sha256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Sha256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Sha256Hash<to>\n  return toHex(bytes) as Sha256Hash<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CommitmentToVersionedHashErrorType,\n  commitmentToVersionedHash,\n} from './commitmentToVersionedHash.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentsToVersionedHashesParameters<\n  commitments extends readonly Uint8Array[] | readonly Hex[] =\n    | readonly Uint8Array[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Commitments from blobs. */\n  commitments: commitments | readonly Uint8Array[] | readonly Hex[]\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hashes. */\n  version?: number | undefined\n}\n\nexport type CommitmentsToVersionedHashesReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type CommitmentsToVersionedHashesErrorType =\n  | CommitmentToVersionedHashErrorType\n  | ErrorType\n\n/**\n * Transform a list of commitments to their versioned hashes.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentsToVersionedHashes,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const versionedHashes = commitmentsToVersionedHashes({ commitments })\n * ```\n */\nexport function commitmentsToVersionedHashes<\n  const commitments extends readonly Uint8Array[] | readonly Hex[],\n  to extends To =\n    | (commitments extends readonly Hex[] ? 'hex' : never)\n    | (commitments extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: CommitmentsToVersionedHashesParameters<commitments, to>,\n): CommitmentsToVersionedHashesReturnType<to> {\n  const { commitments, version } = parameters\n\n  const to =\n    parameters.to ?? (typeof commitments[0] === 'string' ? 'hex' : 'bytes')\n\n  const hashes: Uint8Array[] | Hex[] = []\n  for (const commitment of commitments) {\n    hashes.push(\n      commitmentToVersionedHash({\n        commitment,\n        to,\n        version,\n      }) as any,\n    )\n  }\n  return hashes as any\n}\n", "import { versionedHashVersionKzg } from '../constants/kzg.js'\nimport type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlobSizeTooLargeErrorType = BlobSizeTooLargeError & {\n  name: 'BlobSizeTooLargeError'\n}\nexport class BlobSizeTooLargeError extends BaseError {\n  constructor({ maxSize, size }: { maxSize: number; size: number }) {\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n      name: 'BlobSizeTooLargeError',\n    })\n  }\n}\n\nexport type EmptyBlobErrorType = EmptyBlobError & {\n  name: 'EmptyBlobError'\n}\nexport class EmptyBlobError extends BaseError {\n  constructor() {\n    super('Blob data must not be empty.', { name: 'EmptyBlobError' })\n  }\n}\n\nexport type InvalidVersionedHashSizeErrorType =\n  InvalidVersionedHashSizeError & {\n    name: 'InvalidVersionedHashSizeError'\n  }\nexport class InvalidVersionedHashSizeError extends BaseError {\n  constructor({\n    hash,\n    size,\n  }: {\n    hash: Hash\n    size: number\n  }) {\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n      name: 'InvalidVersionedHashSizeError',\n    })\n  }\n}\n\nexport type InvalidVersionedHashVersionErrorType =\n  InvalidVersionedHashVersionError & {\n    name: 'InvalidVersionedHashVersionError'\n  }\nexport class InvalidVersionedHashVersionError extends BaseError {\n  constructor({\n    hash,\n    version,\n  }: {\n    hash: Hash\n    version: number\n  }) {\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [\n        `Expected: ${versionedHashVersionKzg}`,\n        `Received: ${version}`,\n      ],\n      name: 'InvalidVersionedHashVersionError',\n    })\n  }\n}\n", "import {\n  bytesPerBlob,\n  bytesPerFieldElement,\n  fieldElementsPerBlob,\n  maxBytesPerTransaction,\n} from '../../constants/blob.js'\nimport {\n  BlobSizeTooLargeError,\n  type BlobSizeTooLargeErrorType,\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n} from '../../errors/blob.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type CreateCursorErrorType, createCursor } from '../cursor.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobsParameters<\n  data extends Hex | ByteArray = Hex | ByteArray,\n  to extends To | undefined = undefined,\n> = {\n  /** Data to transform to a blob. */\n  data: data | Hex | ByteArray\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type ToBlobsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type ToBlobsErrorType =\n  | BlobSizeTooLargeErrorType\n  | BytesToHexErrorType\n  | CreateCursorErrorType\n  | EmptyBlobErrorType\n  | HexToBytesErrorType\n  | SizeErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data to blobs.\n *\n * @example\n * ```ts\n * import { toBlobs, stringToHex } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * ```\n */\nexport function toBlobs<\n  const data extends Hex | ByteArray,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never),\n>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to> {\n  const to =\n    parameters.to ?? (typeof parameters.data === 'string' ? 'hex' : 'bytes')\n  const data = (\n    typeof parameters.data === 'string'\n      ? hexToBytes(parameters.data)\n      : parameters.data\n  ) as ByteArray\n\n  const size_ = size(data)\n  if (!size_) throw new EmptyBlobError()\n  if (size_ > maxBytesPerTransaction)\n    throw new BlobSizeTooLargeError({\n      maxSize: maxBytesPerTransaction,\n      size: size_,\n    })\n\n  const blobs = []\n\n  let active = true\n  let position = 0\n  while (active) {\n    const blob = createCursor(new Uint8Array(bytesPerBlob))\n\n    let size = 0\n    while (size < fieldElementsPerBlob) {\n      const bytes = data.slice(position, position + (bytesPerFieldElement - 1))\n\n      // Push a zero byte so the field element doesn't overflow the BLS modulus.\n      blob.pushByte(0x00)\n\n      // Push the current segment of data bytes.\n      blob.pushBytes(bytes)\n\n      // If we detect that the current segment of data bytes is less than 31 bytes,\n      // we can stop processing and push a terminator byte to indicate the end of the blob.\n      if (bytes.length < 31) {\n        blob.pushByte(0x80)\n        active = false\n        break\n      }\n\n      size++\n      position += 31\n    }\n\n    blobs.push(blob)\n  }\n\n  return (\n    to === 'bytes'\n      ? blobs.map((x) => x.bytes)\n      : blobs.map((x) => bytesToHex(x.bytes))\n  ) as any\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { BlobSidecars } from '../../types/eip4844.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from './blobsToCommitments.js'\nimport { blobsToProofs, type blobsToProofsErrorType } from './blobsToProofs.js'\nimport { type ToBlobsErrorType, toBlobs } from './toBlobs.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobSidecarsParameters<\n  data extends Hex | ByteArray | undefined = undefined,\n  blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined,\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Return type. */\n  to?: to | To | undefined\n} & OneOf<\n  | {\n      /** Data to transform into blobs. */\n      data: data | Hex | ByteArray\n      /** KZG implementation. */\n      kzg: Kzg\n    }\n  | {\n      /** Blobs. */\n      blobs: blobs | readonly Hex[] | readonly ByteArray[]\n      /** Commitment for each blob. */\n      commitments: _blobsType | readonly Hex[] | readonly ByteArray[]\n      /** Proof for each blob. */\n      proofs: _blobsType | readonly Hex[] | readonly ByteArray[]\n    }\n>\n\nexport type ToBlobSidecarsReturnType<to extends To> =\n  | (to extends 'bytes' ? BlobSidecars<ByteArray> : never)\n  | (to extends 'hex' ? BlobSidecars<Hex> : never)\n\nexport type ToBlobSidecarsErrorType =\n  | BlobsToCommitmentsErrorType\n  | ToBlobsErrorType\n  | blobsToProofsErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars<\n  const data extends Hex | ByteArray | undefined = undefined,\n  const blobs extends\n    | readonly Hex[]\n    | readonly ByteArray[]\n    | undefined = undefined,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never)\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: ToBlobSidecarsParameters<data, blobs, to>,\n): ToBlobSidecarsReturnType<to> {\n  const { data, kzg, to } = parameters\n  const blobs = parameters.blobs ?? toBlobs({ data: data!, to })\n  const commitments =\n    parameters.commitments ?? blobsToCommitments({ blobs, kzg: kzg!, to })\n  const proofs =\n    parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg: kzg!, to })\n\n  const sidecars: BlobSidecars = []\n  for (let i = 0; i < blobs.length; i++)\n    sidecars.push({\n      blob: blobs[i],\n      commitment: commitments[i],\n      proof: proofs[i],\n    })\n\n  return sidecars as ToBlobSidecarsReturnType<to>\n}\n", "import { versionedHashVersionKzg } from '../../constants/kzg.js'\nimport { maxUint256 } from '../../constants/number.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n  InvalidVersionedHashSizeError,\n  type InvalidVersionedHashSizeErrorType,\n  InvalidVersionedHashVersionError,\n  type InvalidVersionedHashVersionErrorType,\n} from '../../errors/blob.js'\nimport {\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from '../../errors/chain.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { size } from '../data/size.js'\nimport { slice } from '../data/slice.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nexport type AssertTransactionEIP7702ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | ErrorType\n\nexport function assertTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n) {\n  const { authorizationList } = transaction\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const { chainId } = authorization\n      const address = authorization.address\n      if (!isAddress(address)) throw new InvalidAddressError({ address })\n      if (chainId < 0) throw new InvalidChainIdError({ chainId })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP4844ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | EmptyBlobErrorType\n  | InvalidVersionedHashSizeErrorType\n  | InvalidVersionedHashVersionErrorType\n  | ErrorType\n\nexport function assertTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n) {\n  const { blobVersionedHashes } = transaction\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError()\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash)\n      const version = hexToNumber(slice(hash, 0, 1))\n      if (size_ !== 32)\n        throw new InvalidVersionedHashSizeError({ hash, size: size_ })\n      if (version !== versionedHashVersionKzg)\n        throw new InvalidVersionedHashVersionError({\n          hash,\n          version,\n        })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP1559ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n\nexport type AssertTransactionEIP2930ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n\nexport type AssertTransactionLegacyErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new InvalidChainIdError({ chainId })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n", "import {\n  InvalidSerializableTransactionError,\n  type InvalidSerializableTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesEIP4844,\n  FeeValuesLegacy,\n} from '../../index.js'\nimport type {\n  TransactionRequestGeneric,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n} from '../../types/transaction.js'\nimport type { Assign, ExactPartial, IsNever, OneOf } from '../../types/utils.js'\n\nexport type GetTransactionType<\n  transaction extends OneOf<\n    TransactionSerializableGeneric | TransactionRequestGeneric\n  > = TransactionSerializableGeneric,\n  result =\n    | (transaction extends LegacyProperties ? 'legacy' : never)\n    | (transaction extends EIP1559Properties ? 'eip1559' : never)\n    | (transaction extends EIP2930Properties ? 'eip2930' : never)\n    | (transaction extends EIP4844Properties ? 'eip4844' : never)\n    | (transaction extends EIP7702Properties ? 'eip7702' : never)\n    | (transaction['type'] extends TransactionSerializableGeneric['type']\n        ? Extract<transaction['type'], string>\n        : never),\n> = IsNever<keyof transaction> extends true\n  ? string\n  : IsNever<result> extends false\n    ? result\n    : string\n\nexport type GetTransactionTypeErrorType =\n  | InvalidSerializableTransactionErrorType\n  | ErrorType\n\nexport function getTransactionType<\n  const transaction extends OneOf<\n    TransactionSerializableGeneric | TransactionRequestGeneric\n  >,\n>(transaction: transaction): GetTransactionType<transaction> {\n  if (transaction.type)\n    return transaction.type as GetTransactionType<transaction>\n\n  if (typeof transaction.authorizationList !== 'undefined')\n    return 'eip7702' as any\n\n  if (\n    typeof transaction.blobs !== 'undefined' ||\n    typeof transaction.blobVersionedHashes !== 'undefined' ||\n    typeof transaction.maxFeePerBlobGas !== 'undefined' ||\n    typeof transaction.sidecars !== 'undefined'\n  )\n    return 'eip4844' as any\n\n  if (\n    typeof transaction.maxFeePerGas !== 'undefined' ||\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  ) {\n    return 'eip1559' as any\n  }\n\n  if (typeof transaction.gasPrice !== 'undefined') {\n    if (typeof transaction.accessList !== 'undefined') return 'eip2930' as any\n    return 'legacy' as any\n  }\n\n  throw new InvalidSerializableTransactionError({ transaction })\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype BaseProperties = {\n  accessList?: undefined\n  authorizationList?: undefined\n  blobs?: undefined\n  blobVersionedHashes?: undefined\n  gasPrice?: undefined\n  maxFeePerBlobGas?: undefined\n  maxFeePerGas?: undefined\n  maxPriorityFeePerGas?: undefined\n  sidecars?: undefined\n}\n\ntype LegacyProperties = Assign<BaseProperties, FeeValuesLegacy>\ntype EIP1559Properties = Assign<\n  BaseProperties,\n  OneOf<\n    | {\n        maxFeePerGas: FeeValuesEIP1559['maxFeePerGas']\n      }\n    | {\n        maxPriorityFeePerGas: FeeValuesEIP1559['maxPriorityFeePerGas']\n      },\n    FeeValuesEIP1559\n  > & {\n    accessList?: TransactionSerializableEIP2930['accessList'] | undefined\n  }\n>\ntype EIP2930Properties = Assign<\n  ExactPartial<LegacyProperties>,\n  {\n    accessList: TransactionSerializableEIP2930['accessList']\n  }\n>\ntype EIP4844Properties = Assign<\n  ExactPartial<EIP1559Properties>,\n  ExactPartial<FeeValuesEIP4844> &\n    OneOf<\n      | {\n          blobs: TransactionSerializableEIP4844['blobs']\n        }\n      | {\n          blobVersionedHashes: TransactionSerializableEIP4844['blobVersionedHashes']\n        }\n      | {\n          sidecars: TransactionSerializableEIP4844['sidecars']\n        },\n      TransactionSerializableEIP4844\n    >\n>\ntype EIP7702Properties = Assign<\n  ExactPartial<EIP1559Properties>,\n  {\n    authorizationList: TransactionSerializableEIP7702['authorizationList']\n  }\n>\n", "import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidStorageKeySizeError,\n  type InvalidStorageKeySizeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { AccessList } from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\n\nexport type SerializeAccessListErrorType =\n  | InvalidStorageKeySizeErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(\n  accessList?: AccessList | undefined,\n): RecursiveArray<Hex> {\n  if (!accessList || accessList.length === 0) return []\n\n  const serializedAccessList = []\n  for (let i = 0; i < accessList.length; i++) {\n    const { address, storageKeys } = accessList[i]\n\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] })\n      }\n    }\n\n    if (!isAddress(address, { strict: false })) {\n      throw new InvalidAddressError({ address })\n    }\n\n    serializedAccessList.push([address, storageKeys])\n  }\n  return serializedAccessList\n}\n", "import type { Chain } from '../types/chain.js'\n\n/**\n * Predeploy contracts for OP Stack.\n * @see https://github.com/ethereum-optimism/optimism/blob/develop/specs/predeploys.md\n */\nexport const contracts = {\n  gasPriceOracle: { address: '0x420000000000000000000000000000000000000F' },\n  l1Block: { address: '0x4200000000000000000000000000000000000015' },\n  l2CrossDomainMessenger: {\n    address: '0x4200000000000000000000000000000000000007',\n  },\n  l2Erc721Bridge: { address: '0x4200000000000000000000000000000000000014' },\n  l2StandardBridge: { address: '0x4200000000000000000000000000000000000010' },\n  l2ToL1MessagePasser: {\n    address: '0x4200000000000000000000000000000000000016',\n  },\n} as const satisfies Chain['contracts']\n", "import type { ChainFormatters } from '../types/chain.js'\nimport type { RpcTransaction } from '../types/rpc.js'\nimport { hexToBigInt } from '../utils/encoding/fromHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js'\nimport type { OpStackBlock, OpStackRpcBlock } from './types/block.js'\nimport type {\n  OpStackRpcTransaction,\n  OpStackRpcTransactionReceipt,\n  OpStackTransaction,\n  OpStackTransactionReceipt,\n} from './types/transaction.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: OpStackRpcBlock): OpStackBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(\n          transaction as RpcTransaction,\n        ) as OpStackTransaction\n        if (formatted.typeHex === '0x7e') {\n          formatted.isSystemTx = transaction.isSystemTx\n          formatted.mint = transaction.mint\n            ? hexToBigInt(transaction.mint)\n            : undefined\n          formatted.sourceHash = transaction.sourceHash\n          formatted.type = 'deposit'\n        }\n        return formatted\n      })\n      return {\n        transactions,\n        stateRoot: args.stateRoot,\n      } as OpStackBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: OpStackRpcTransaction): OpStackTransaction {\n      const transaction = {} as OpStackTransaction\n      if (args.type === '0x7e') {\n        transaction.isSystemTx = args.isSystemTx\n        transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined\n        transaction.sourceHash = args.sourceHash\n        transaction.type = 'deposit'\n      }\n      return transaction\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(args: OpStackRpcTransactionReceipt): OpStackTransactionReceipt {\n      return {\n        l1GasPrice: args.l1GasPrice ? hexToBigInt(args.l1GasPrice) : null,\n        l1GasUsed: args.l1GasUsed ? hexToBigInt(args.l1GasUsed) : null,\n        l1Fee: args.l1Fee ? hexToBigInt(args.l1Fee) : null,\n        l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null,\n      } as OpStackTransactionReceipt\n    },\n  }),\n} as const satisfies ChainFormatters\n", "import { InvalidAddressError } from '../errors/address.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Hex, Signature } from '../types/misc.js'\nimport type { TransactionSerializable } from '../types/transaction.js'\nimport type { RequiredBy } from '../types/utils.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport {\n  type SerializeTransactionErrorType as SerializeTransactionErrorType_,\n  serializeTransaction as serializeTransaction_,\n} from '../utils/transaction/serializeTransaction.js'\nimport type {\n  OpStackTransactionSerializable,\n  TransactionSerializableDeposit,\n  TransactionSerializedDeposit,\n} from './types/transaction.js'\n\nexport type SerializeTransactionReturnType = ReturnType<\n  typeof serializeTransaction\n>\n\nexport type SerializeTransactionErrorType =\n  | SerializeTransactionErrorType_\n  | ErrorType\n\nexport function serializeTransaction(\n  transaction: OpStackTransactionSerializable,\n  signature?: Signature,\n) {\n  if (isDeposit(transaction)) return serializeTransactionDeposit(transaction)\n  return serializeTransaction_(\n    transaction as TransactionSerializable,\n    signature,\n  )\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionDepositReturnType = TransactionSerializedDeposit\n\nfunction serializeTransactionDeposit(\n  transaction: TransactionSerializableDeposit,\n): SerializeTransactionDepositReturnType {\n  assertTransactionDeposit(transaction)\n\n  const { sourceHash, data, from, gas, isSystemTx, mint, to, value } =\n    transaction\n\n  const serializedTransaction: Hex[] = [\n    sourceHash,\n    from,\n    to ?? '0x',\n    mint ? toHex(mint) : '0x',\n    value ? toHex(value) : '0x',\n    gas ? toHex(gas) : '0x',\n    isSystemTx ? '0x1' : '0x',\n    data ?? '0x',\n  ]\n\n  return concatHex([\n    '0x7e',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionDepositReturnType\n}\n\nfunction isDeposit(\n  transaction: OpStackTransactionSerializable,\n): transaction is RequiredBy<TransactionSerializableDeposit, 'type'> {\n  if (transaction.type === 'deposit') return true\n  if (typeof transaction.sourceHash !== 'undefined') return true\n  return false\n}\n\nexport function assertTransactionDeposit(\n  transaction: TransactionSerializableDeposit,\n) {\n  const { from, to } = transaction\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n}\n", "import { contracts } from './contracts.js'\nimport { formatters } from './formatters.js'\nimport { serializers } from './serializers.js'\n\nexport const chainConfig = {\n  contracts,\n  formatters,\n  serializers,\n} as const\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const arbitrum = /*#__PURE__*/ defineChain({\n  id: 42_161,\n  name: 'Arbitrum One',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://arb1.arbitrum.io/rpc'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Arbiscan',\n      url: 'https://arbiscan.io',\n      apiUrl: 'https://api.arbiscan.io/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 7654707,\n    },\n  },\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const arbitrumSepolia = /*#__PURE__*/ defineChain({\n  id: 421_614,\n  name: 'Arbitrum Sepolia',\n  nativeCurrency: {\n    name: 'Arbitrum Sepolia Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia-rollup.arbitrum.io/rpc'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Arbiscan',\n      url: 'https://sepolia.arbiscan.io',\n      apiUrl: 'https://api-sepolia.arbiscan.io/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 81930,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const avalanche = /*#__PURE__*/ defineChain({\n  id: 43_114,\n  name: 'Avalanche',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche',\n    symbol: 'AVAX',\n  },\n  rpcUrls: {\n    default: { http: ['https://api.avax.network/ext/bc/C/rpc'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'SnowTrace',\n      url: 'https://snowtrace.io',\n      apiUrl: 'https://api.snowtrace.io',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 11907934,\n    },\n  },\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const avalancheFuji = /*#__PURE__*/ defineChain({\n  id: 43_113,\n  name: 'Avalanche Fuji',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche Fuji',\n    symbol: 'AVAX',\n  },\n  rpcUrls: {\n    default: { http: ['https://api.avax-test.network/ext/bc/C/rpc'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'SnowTrace',\n      url: 'https://testnet.snowtrace.io',\n      apiUrl: 'https://api-testnet.snowtrace.io',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 7096959,\n    },\n  },\n  testnet: true,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 1 // mainnet\n\nexport const base = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 8453,\n  name: 'Base',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://mainnet.base.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Basescan',\n      url: 'https://basescan.org',\n      apiUrl: 'https://api.basescan.org/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e',\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x56315b90c40730925ec5485cf004d835058518A0',\n      },\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 5022,\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x49048044D57e1C92A77f79988d21Fa8fAF74E97e',\n        blockCreated: 17482143,\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0x3154Cf16ccdb4C6d922629664174b904d80F2C35',\n        blockCreated: 17482143,\n      },\n    },\n  },\n  sourceId,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const baseSepolia = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 84532,\n  network: 'base-sepolia',\n  name: 'Base Sepolia',\n  nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.base.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Basescan',\n      url: 'https://sepolia.basescan.org',\n      apiUrl: 'https://api-sepolia.basescan.org/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1',\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254',\n      },\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x49f53e41452c74589e85ca1677426ba426459e85',\n        blockCreated: 4446677,\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0xfd0Bf71F60660E2f608ed56e1659C450eB113120',\n        blockCreated: 4446677,\n      },\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 1059647,\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const bitlayerTestnet = /*#__PURE__*/ defineChain({\n  id: 200810,\n  name: 'Bitlayer Testnet',\n  nativeCurrency: {\n    name: 'BTC',\n    symbol: 'BTC',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://testnet-rpc.bitlayer.org'],\n      webSocket: ['wss://testnet-ws.bitlayer.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'bitlayer testnet scan',\n      url: 'https://testnet.btrscan.com',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0x5B256fE9e993902eCe49D138a5b1162cBb529474',\n      blockCreated: 4135671,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const blastSepolia = /*#__PURE__*/ defineChain({\n  id: 168_587_773,\n  name: 'Blast Sepolia',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.blast.io'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blastscan',\n      url: 'https://sepolia.blastscan.io',\n      apiUrl: 'https://api-sepolia.blastscan.io/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 756690,\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const botanixTestnet = /*#__PURE__*/ defineChain({\n  id: 3636,\n  name: 'Botanix Testnet',\n  nativeCurrency: { name: 'Botanix', symbol: 'BTC', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://node.botanixlabs.dev'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Botanix Testnet Explorer',\n      url: 'https://testnet.botanixscan.io',\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const bscTestnet = /*#__PURE__*/ defineChain({\n  id: 97,\n  name: 'Binance Smart Chain Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'BNB',\n    symbol: 'tBNB',\n  },\n  rpcUrls: {\n    default: { http: ['https://data-seed-prebsc-1-s1.bnbchain.org:8545'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'BscScan',\n      url: 'https://testnet.bscscan.com',\n      apiUrl: 'https://api-testnet.bscscan.com/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 17422483,\n    },\n  },\n  testnet: true,\n})\n", "import type { Client } from '../clients/createClient.js'\nimport type {\n  Address,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFees,\n  Hex,\n} from '../index.js'\nimport type { formatters } from './formatters.js'\n\nexport const fees: ChainFees<typeof formatters> = {\n  /*\n   * Estimates the fees per gas for a transaction.\n\n   * If the transaction is to be paid in a token (feeCurrency is present) then the fees \n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   * \n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async (\n    params: ChainEstimateFeesPerGasFnParameters<typeof formatters>,\n  ) => {\n    if (!params.request?.feeCurrency) return null\n\n    const [gasPrice, maxPriorityFeePerGas] = await Promise.all([\n      estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),\n      estimateMaxPriorityFeePerGasInFeeCurrency(\n        params.client,\n        params.request.feeCurrency,\n      ),\n    ])\n\n    // eth_gasPrice for cel2 returns baseFeePerGas + maxPriorityFeePerGas\n    const maxFeePerGas =\n      params.multiply(gasPrice - maxPriorityFeePerGas) + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }\n  },\n}\n\ntype RequestGasPriceInFeeCurrencyParams = {\n  Method: 'eth_gasPrice'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const fee = await client.request<RequestGasPriceInFeeCurrencyParams>({\n    method: 'eth_gasPrice',\n    params: [feeCurrency],\n  })\n  return BigInt(fee)\n}\n\ntype RequestMaxGasPriceInFeeCurrencyParams = {\n  Method: 'eth_maxPriorityFeePerGas'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const feesPerGas =\n    await client.request<RequestMaxGasPriceInFeeCurrencyParams>({\n      method: 'eth_maxPriorityFeePerGas',\n      params: [feeCurrency],\n    })\n  return BigInt(feesPerGas)\n}\n", "import type { ChainFormatters } from '../types/chain.js'\nimport type { RpcTransaction } from '../types/rpc.js'\nimport { hexToBigInt } from '../utils/encoding/fromHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../utils/formatters/transaction.js'\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js'\nimport type {\n  CeloBlock,\n  CeloRpcBlock,\n  CeloRpcTransaction,\n  CeloRpcTransactionRequest,\n  CeloTransaction,\n  CeloTransactionRequest,\n} from './types.js'\nimport { isCIP64 } from './utils.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: CeloRpcBlock): CeloBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(transaction as RpcTransaction)\n        return {\n          ...formatted,\n          ...(transaction.gatewayFee\n            ? {\n                gatewayFee: hexToBigInt(transaction.gatewayFee),\n                gatewayFeeRecipient: transaction.gatewayFeeRecipient,\n              }\n            : {}),\n          feeCurrency: transaction.feeCurrency,\n        }\n      })\n      return {\n        transactions,\n        ...(args.randomness ? { randomness: args.randomness } : {}),\n      } as CeloBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: CeloRpcTransaction): CeloTransaction {\n      if (args.type === '0x7e')\n        return {\n          isSystemTx: args.isSystemTx,\n          mint: args.mint ? hexToBigInt(args.mint) : undefined,\n          sourceHash: args.sourceHash,\n          type: 'deposit',\n        } as CeloTransaction\n\n      const transaction = { feeCurrency: args.feeCurrency } as CeloTransaction\n\n      if (args.type === '0x7b') transaction.type = 'cip64'\n      else {\n        if (args.type === '0x7c') transaction.type = 'cip42'\n\n        transaction.gatewayFee = args.gatewayFee\n          ? hexToBigInt(args.gatewayFee)\n          : null\n        transaction.gatewayFeeRecipient = args.gatewayFeeRecipient\n      }\n\n      return transaction\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    format(args: CeloTransactionRequest): CeloRpcTransactionRequest {\n      const request = {} as CeloRpcTransactionRequest\n\n      if (args.feeCurrency) request.feeCurrency = args.feeCurrency\n      if (isCIP64(args)) request.type = '0x7b'\n\n      return request\n    },\n  }),\n} as const satisfies ChainFormatters\n", "import type { Address } from 'abitype'\nimport { trim } from '../utils/data/trim.js'\nimport type {\n  CeloTransactionRequest,\n  CeloTransactionSerializable,\n  TransactionSerializableCIP64,\n} from './types.js'\n\nexport function isEmpty(\n  value: string | undefined | number | BigInt,\n): value is undefined {\n  return (\n    value === 0 ||\n    value === 0n ||\n    value === undefined ||\n    value === null ||\n    value === '0' ||\n    value === '' ||\n    (typeof value === 'string' &&\n      (trim(value as Address).toLowerCase() === '0x' ||\n        trim(value as Address).toLowerCase() === '0x00'))\n  )\n}\n\nexport function isPresent(\n  value: string | undefined | number | BigInt,\n): value is string | number | BigInt {\n  return !isEmpty(value)\n}\n\n/** @internal */\nexport function isEIP1559(\n  transaction: CeloTransactionSerializable | CeloTransactionRequest,\n): boolean {\n  return (\n    typeof transaction.maxFeePerGas !== 'undefined' &&\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  )\n}\n\nexport function isCIP64(\n  transaction: CeloTransactionSerializable | CeloTransactionRequest,\n): transaction is TransactionSerializableCIP64 {\n  /*\n   * Enable end user to force the tx to be considered as a CIP-64.\n   *\n   * The preliminary type will be determined as \"eip1559\" by src/utils/transaction/getTransactionType.ts\n   * and so we need the logic below to check for the specific value instead of checking if just any\n   * transaction type is provided. If that's anything else than \"cip64\" then we need to reevaluate the\n   * type based on the transaction fields.\n   *\n   * Modify with caution and according to https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n   */\n  if (transaction.type === 'cip64') {\n    return true\n  }\n\n  return isEIP1559(transaction) && isPresent(transaction.feeCurrency)\n}\n", "import { maxUint256 } from '../constants/number.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport { BaseError } from '../errors/base.js'\nimport { InvalidChainIdError } from '../errors/chain.js'\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js'\nimport { serializeTransaction as serializeTransaction_op } from '../op-stack/serializers.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Signature } from '../types/misc.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js'\nimport { toYParitySignatureArray } from '../utils/transaction/serializeTransaction.js'\nimport type {\n  CeloTransactionSerializable,\n  TransactionSerializableCIP42,\n  TransactionSerializableCIP64,\n  TransactionSerializedCIP64,\n} from './types.js'\nimport { isCIP64, isEmpty, isPresent } from './utils.js'\n\nexport function serializeTransaction(\n  transaction: CeloTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isCIP64(transaction))\n    return serializeTransactionCIP64(transaction, signature)\n  return serializeTransaction_op(transaction, signature)\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionCIP64ReturnType = TransactionSerializedCIP64\n\nfunction serializeTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n  signature?: Signature | undefined,\n): SerializeTransactionCIP64ReturnType {\n  assertTransactionCIP64(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n    feeCurrency!,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x7b',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP64ReturnType\n}\n\n// maxFeePerGas must be less than maxUint256\nconst MAX_MAX_FEE_PER_GAS = maxUint256\n\nexport function assertTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient,\n  } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-42 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (\n    (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient)) ||\n    (isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee))\n  ) {\n    throw new BaseError(\n      '`gatewayFee` and `gatewayFeeRecipient` must be provided together.',\n    )\n  }\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-42 transactions.',\n    )\n  }\n\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient)\n  }\n\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError(\n      'Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.',\n    )\n  }\n}\n\nexport function assertTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n  } = transaction\n\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-64 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-64 transactions.',\n    )\n  }\n\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` must be provided for CIP-64 transactions.',\n    )\n  }\n}\n", "import { contracts } from '../op-stack/contracts.js'\nimport { fees } from './fees.js'\nimport { formatters } from './formatters.js'\nimport { serializers } from './serializers.js'\n\nexport const chainConfig = {\n  contracts,\n  formatters,\n  serializers,\n  fees,\n} as const\n", "import { chainConfig } from '../../celo/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 17000 // holsky\n// source https://storage.googleapis.com/cel2-rollup-files/alfajores/deployment-l1.json\n\nexport const celoAlfajores = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 44_787,\n  name: 'Alfajores',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'CELO',\n    symbol: 'A-CELO',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://alfajores-forno.celo-testnet.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Celo Alfajores Explorer',\n      url: 'https://celo-alfajores.blockscout.com',\n      apiUrl: 'https://celo-alfajores.blockscout.com/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 14569001,\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x82527353927d8D069b3B452904c942dA149BA381',\n        blockCreated: 2411324,\n      },\n    },\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0xE28AAdcd9883746c0e5068F58f9ea06027b214cb',\n        blockCreated: 2411324,\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x4a2635e9e4f6e45817b1D402ac4904c1d1752438',\n        blockCreated: 2411324,\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0xD1B0E0581973c9eB7f886967A606b9441A897037',\n        blockCreated: 2411324,\n      },\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const cronosTestnet = /*#__PURE__*/ defineChain({\n  id: 338,\n  name: 'Cronos Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'CRO',\n    symbol: 'tCRO',\n  },\n  rpcUrls: {\n    default: { http: ['https://evm-t3.cronos.org'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Cronos Explorer',\n      url: 'https://cronos.org/explorer/testnet3',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 10191251,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const gnosisChiado = /*#__PURE__*/ defineChain({\n  id: 10_200,\n  name: 'Gnosis Chiado',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Gnosis',\n    symbol: 'xDAI',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.chiadochain.net'],\n      webSocket: ['wss://rpc.chiadochain.net/wss'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://blockscout.chiadochain.net',\n      apiUrl: 'https://blockscout.chiadochain.net/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 4967313,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const hashkeyTestnet = /*#__PURE__*/ defineChain({\n  id: 133,\n  name: 'HashKey Chain Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'HashKey EcoPoints',\n    symbol: 'HSK',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://hashkeychain-testnet.alt.technology'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'HashKey Chain Explorer',\n      url: 'https://hashkeychain-testnet-explorer.alt.technology',\n    },\n  },\n  testnet: true,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const inkSepolia = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 763373,\n  name: 'Ink Sepolia',\n  nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc-gel-sepolia.inkonchain.com'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://explorer-sepolia.inkonchain.com/',\n      apiUrl: 'https://explorer-sepolia.inkonchain.com/api/v2',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 0,\n    },\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0x860e626c700af381133d9f4af31412a2d1db3d5d',\n      },\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x5c1d29c6c9c8b0800692acc95d700bcb4966a1d7',\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0x33f60714bbd74d62b66d79213c348614de51901c',\n      },\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { EstimateGasParameters as EstimateGasParameters_base } from '../../actions/public/estimateGas.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { Filter } from '../../types/utils.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getCallError } from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport type { LineaRpcSchema } from '../types/rpc.js'\n\nexport type EstimateGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = EstimateGasParameters_base<chain> & GetAccountParameter<account>\n\nexport type EstimateGasReturnType = {\n  gasLimit: bigint\n  baseFeePerGas: bigint\n  priorityFeePerGas: bigint\n}\n\n/**\n * Estimates the gas and fees per gas necessary to complete a transaction without submitting it to the network.\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns A gas estimate and fees per gas (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { linea } from 'viem/chains'\n * import { estimateGas } from 'viem/linea'\n *\n * const client = createPublicClient({\n *   chain: linea,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 0n,\n * })\n */\nexport async function estimateGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: EstimateGasParameters<chain>,\n): Promise<EstimateGasReturnType> {\n  const { account: account_ = client.account } = args\n\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = args\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    type LineaEstimateGasSchema = Filter<\n      LineaRpcSchema,\n      { Method: 'linea_estimateGas' }\n    >[0]\n    const { baseFeePerGas, gasLimit, priorityFeePerGas } =\n      await client.request<LineaEstimateGasSchema>({\n        method: 'linea_estimateGas',\n        params: block ? [request, block] : [request],\n      })\n    return {\n      baseFeePerGas: BigInt(baseFeePerGas),\n      gasLimit: BigInt(gasLimit),\n      priorityFeePerGas: BigInt(priorityFeePerGas),\n    }\n  } catch (err) {\n    throw getCallError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n", "import { BaseError } from './base.js'\n\nexport type AccountNotFoundErrorType = AccountNotFoundError & {\n  name: 'AccountNotFoundError'\n}\nexport class AccountNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath?: string | undefined } = {}) {\n    super(\n      [\n        'Could not find an Account to execute with this Action.',\n        'Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client.',\n      ].join('\\n'),\n      {\n        docsPath,\n        docsSlug: 'account',\n        name: 'AccountNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AccountTypeNotSupportedErrorType = AccountTypeNotSupportedError & {\n  name: 'AccountTypeNotSupportedError'\n}\nexport class AccountTypeNotSupportedError extends BaseError {\n  constructor({\n    docsPath,\n    metaMessages,\n    type,\n  }: {\n    docsPath?: string | undefined\n    metaMessages?: string[] | undefined\n    type: string\n  }) {\n    super(`Account type \"${type}\" is not supported.`, {\n      docsPath,\n      metaMessages,\n      name: 'AccountTypeNotSupportedError',\n    })\n  }\n}\n", "import type { ChainConfig, ChainEstimateFeesPerGasFn } from '../types/chain.js'\nimport { estimateGas } from './actions/estimateGas.js'\n\nexport const chainConfig = {\n  fees: {\n    estimateFeesPerGas,\n    async maxPriorityFeePerGas({ block, client, request }) {\n      const response = await estimateFeesPerGas({\n        block,\n        client,\n        multiply: (x) => x,\n        request,\n        type: 'eip1559',\n      })\n      // Returning `null` will trigger the base `estimateMaxPriorityFeePerGas` to perform\n      // fallback mechanisms to estimate priority fee.\n      if (!response?.maxPriorityFeePerGas) return null\n      return response.maxPriorityFeePerGas\n    },\n  },\n} as const satisfies ChainConfig\n\n///////////////////////////////////////////////////////////////////////////\n// Internal\n///////////////////////////////////////////////////////////////////////////\n\nasync function estimateFeesPerGas({\n  client,\n  multiply,\n  request,\n  type,\n}: Parameters<ChainEstimateFeesPerGasFn>[0]): ReturnType<ChainEstimateFeesPerGasFn> {\n  try {\n    const response = await estimateGas(client, {\n      ...request,\n      account: request?.account!,\n    })\n    const { priorityFeePerGas: maxPriorityFeePerGas } = response\n\n    const baseFeePerGas = multiply(BigInt(response.baseFeePerGas))\n    const maxFeePerGas = baseFeePerGas + maxPriorityFeePerGas\n\n    if (type === 'legacy') return { gasPrice: maxFeePerGas }\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }\n  } catch {\n    // Returning `null` will trigger the base `estimateFeesPerGas` to perform\n    // fallback mechanisms to estimate fees.\n    return null\n  }\n}\n", "import { chainConfig } from '../../linea/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const lineaSepolia = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 59_141,\n  name: 'Linea Sepolia Testnet',\n  nativeCurrency: { name: 'Linea Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.sepolia.linea.build'],\n      webSocket: ['wss://rpc.sepolia.linea.build'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Etherscan',\n      url: 'https://sepolia.lineascan.build',\n      apiUrl: 'https://api-sepolia.lineascan.build/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 227427,\n    },\n    ensRegistry: {\n      address: '0x5B2636F0f2137B4aE722C01dd5122D7d3e9541f7',\n      blockCreated: 2395094,\n    },\n    ensUniversalResolver: {\n      address: '0x72560a31B3DAEE82B984a7F51c6b3b1bb7CC9F50',\n      blockCreated: 2395255,\n    },\n  },\n  ensTlds: ['.linea.eth'],\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const mainnet = /*#__PURE__*/ defineChain({\n  id: 1,\n  name: 'Ethereum',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://eth.merkle.io'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Etherscan',\n      url: 'https://etherscan.io',\n      apiUrl: 'https://api.etherscan.io/api',\n    },\n  },\n  contracts: {\n    ensRegistry: {\n      address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n    },\n    ensUniversalResolver: {\n      address: '0xce01f8eee7E479C928F8919abD53E553a36CeF67',\n      blockCreated: 19_258_213,\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 14_353_601,\n    },\n  },\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const mantleSepoliaTestnet = /*#__PURE__*/ defineChain({\n  id: 5003,\n  name: 'Mantle Sepolia Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'MNT',\n    symbol: 'MNT',\n  },\n  rpcUrls: {\n    default: { http: ['https://rpc.sepolia.mantle.xyz'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Mantle Testnet Explorer',\n      url: 'https://explorer.sepolia.mantle.xyz/',\n      apiUrl: 'https://explorer.sepolia.mantle.xyz/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 4584012,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const megaethTestnet = /*#__PURE__*/ defineChain({\n  id: 6342,\n  name: 'MegaETH Testnet',\n  nativeCurrency: {\n    name: 'MegaETH Testnet Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://carrot.megaeth.com/rpc'],\n      webSocket: ['wss://carrot.megaeth.com/ws'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'MegaETH Testnet Explorer',\n      url: 'https://www.megaexplorer.xyz/',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    },\n  },\n  testnet: true,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const modeTestnet = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 919,\n  name: 'Mode Testnet',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.mode.network'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://sepolia.explorer.mode.network',\n      apiUrl: 'https://sepolia.explorer.mode.network/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x2634BD65ba27AB63811c74A63118ACb312701Bfa',\n        blockCreated: 3778393,\n      },\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x320e1580effF37E008F1C92700d1eBa47c1B23fD',\n        blockCreated: 3778395,\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0xbC5C679879B2965296756CD959C3C739769995E2',\n        blockCreated: 3778392,\n      },\n    },\n    multicall3: {\n      address: '0xBAba8373113Fb7a68f195deF18732e01aF8eDfCF',\n      blockCreated: 3019007,\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const monadTestnet = /*#__PURE__*/ defineChain({\n  id: 10_143,\n  name: 'Monad Testnet',\n  nativeCurrency: {\n    name: 'Testnet MON Token',\n    symbol: 'MON',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://testnet-rpc.monad.xyz'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Monad Testnet explorer',\n      url: 'https://testnet.monadexplorer.com',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 251449,\n    },\n  },\n  testnet: true,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 1 // mainnet\n\nexport const optimism = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 10,\n  name: 'OP Mainnet',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://mainnet.optimism.io'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Optimism Explorer',\n      url: 'https://optimistic.etherscan.io',\n      apiUrl: 'https://api-optimistic.etherscan.io/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0xe5965Ab5962eDc7477C8520243A95517CD252fA9',\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0xdfe97868233d1aa22e815a266982f2cf17685a27',\n      },\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 4286263,\n    },\n    portal: {\n      [sourceId]: {\n        address: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed',\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1',\n      },\n    },\n  },\n  sourceId,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const optimismSepolia = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 11155420,\n  name: 'OP Sepolia',\n  nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.optimism.io'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://optimism-sepolia.blockscout.com',\n      apiUrl: 'https://optimism-sepolia.blockscout.com/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1',\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F',\n      },\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 1620204,\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x16Fc5058F25648194471939df75CF27A2fdC48BC',\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1',\n      },\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const polygon = /*#__PURE__*/ defineChain({\n  id: 137,\n  name: 'Polygon',\n  nativeCurrency: { name: 'POL', symbol: 'POL', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://polygon-rpc.com'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'PolygonScan',\n      url: 'https://polygonscan.com',\n      apiUrl: 'https://api.polygonscan.com/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 25770160,\n    },\n  },\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const polygonAmoy = /*#__PURE__*/ defineChain({\n  id: 80_002,\n  name: 'Polygon Amoy',\n  nativeCurrency: { name: 'POL', symbol: 'POL', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc-amoy.polygon.technology'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'PolygonScan',\n      url: 'https://amoy.polygonscan.com',\n      apiUrl: 'https://api-amoy.polygonscan.com/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 3127388,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const saigon = /*#__PURE__*/ defineChain({\n  id: 2021,\n  name: 'Saigon Testnet',\n  nativeCurrency: { name: 'RON', symbol: 'RON', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://saigon-testnet.roninchain.com/rpc'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Saigon Explorer',\n      url: 'https://saigon-app.roninchain.com',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 18736871,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const scrollSepolia = /*#__PURE__*/ defineChain({\n  id: 534_351,\n  name: 'Scroll Sepolia',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia-rpc.scroll.io'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Scrollscan',\n      url: 'https://sepolia.scrollscan.com',\n      apiUrl: 'https://api-sepolia.scrollscan.com/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 9473,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const seiTestnet = /*#__PURE__*/ defineChain({\n  id: 1328,\n  name: 'Sei Testnet',\n  nativeCurrency: { name: 'Sei', symbol: 'SEI', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://evm-rpc-testnet.sei-apis.com'],\n      webSocket: ['wss://evm-ws-testnet.sei-apis.com'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Seitrace',\n      url: 'https://seitrace.com',\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const sepolia = /*#__PURE__*/ defineChain({\n  id: 11_155_111,\n  name: 'Sepolia',\n  nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.drpc.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Etherscan',\n      url: 'https://sepolia.etherscan.io',\n      apiUrl: 'https://api-sepolia.etherscan.io/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 751532,\n    },\n    ensRegistry: { address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e' },\n    ensUniversalResolver: {\n      address: '0xc8Af999e38273D658BE1b921b88A9Ddf005769cC',\n      blockCreated: 5_317_080,\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const shibariumTestnet = /*#__PURE__*/ defineChain({\n  id: 157,\n  name: 'Puppynet Shibarium',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Bone',\n    symbol: 'BONE',\n  },\n  rpcUrls: {\n    default: { http: ['https://puppynet.shibrpc.com'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://puppyscan.shib.io',\n      apiUrl: 'https://puppyscan.shib.io/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xA4029b74FBA366c926eDFA7Dd10B21C621170a4c',\n      blockCreated: 3035769,\n    },\n  },\n  testnet: true,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const soneiumMinato = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 1946,\n  name: 'Soneium Minato Testnet',\n  nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.minato.soneium.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://soneium-minato.blockscout.com',\n      apiUrl: 'https://soneium-minato.blockscout.com/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0xB3Ad2c38E6e0640d7ce6aA952AB3A60E81bf7a01',\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x710e5286C746eC38beeB7538d0146f60D27be343',\n      },\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x65ea1489741A5D72fFdD8e6485B216bBdcC15Af3',\n        blockCreated: 6466136,\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0x5f5a404A5edabcDD80DB05E8e54A78c9EBF000C2',\n        blockCreated: 6466136,\n      },\n    },\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 1,\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const sonicBlazeTestnet = /*#__PURE__*/ defineChain({\n  id: 57_054,\n  name: 'Sonic Blaze Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Sonic',\n    symbol: 'S',\n  },\n  rpcUrls: {\n    default: { http: ['https://rpc.blaze.soniclabs.com'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Sonic Blaze Testnet Explorer',\n      url: 'https://testnet.sonicscan.org',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 1100,\n    },\n  },\n  testnet: true,\n})\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const unichainSepolia = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 1301,\n  name: 'Unichain Sepolia',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.unichain.org'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Uniscan',\n      url: 'https://sepolia.uniscan.xyz',\n      apiUrl: 'https://api-sepolia.uniscan.xyz/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 0,\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x0d83dab629f0e0F9d36c0Cbc89B69a489f0751bD',\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0xea58fcA6849d79EAd1f26608855c2D6407d54Ce2',\n      },\n    },\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0xeff73e5aa3B9AEC32c659Aa3E00444d20a84394b',\n      },\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\n\nexport const xLayerTestnet = /*#__PURE__*/ defineChain({\n  id: 195,\n  name: 'X1 Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'OKB',\n    symbol: 'OKB',\n  },\n  rpcUrls: {\n    default: { http: ['https://xlayertestrpc.okx.com'] },\n  },\n  blockExplorers: {\n    default: {\n      name: 'OKLink',\n      url: 'https://www.oklink.com/xlayer-test',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 624344,\n    },\n  },\n  testnet: true,\n})\n\nexport { xLayerTestnet as x1Testnet }\n", "import { chainConfig } from '../../op-stack/chainConfig.js'\nimport { defineChain } from '../../utils/chain/defineChain.js'\n\nconst sourceId = 11_155_111 // sepolia\n\nexport const zircuitTestnet = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 48899,\n  name: 'Zircuit Testnet',\n  nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: [\n        'https://testnet.zircuit.com',\n        'https://zircuit1-testnet.p2pify.com',\n        'https://zircuit1-testnet.liquify.com',\n      ],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Zircuit Testnet Explorer',\n      url: 'https://explorer.testnet.zircuit.com',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 6040287,\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x740C2dac453aEf7140809F80b72bf0e647af8148',\n      },\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x787f1C8c5924178689E0560a43D848bF8E54b23e',\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0x0545c5fe980098C16fcD0eCB5E79753afa6d9af9',\n      },\n    },\n  },\n  testnet: true,\n})\n", "import { type NetworkType } from './types';\n\nexport const networkTypes: Record<NetworkType, NetworkType> = {\n  mainnet: 'mainnet',\n  testnet: 'testnet',\n  localhost: 'localhost',\n};\n", "import {\n  arbitrum,\n  avalanche,\n  base,\n  mainnet,\n  optimism,\n  polygon,\n} from 'viem/chains';\nimport { config } from '../constants/config';\n\nimport { networkTypes } from './networkTypes';\n\nexport const mainnetNetworks = {\n  ethereum: {\n    name: 'ethereum',\n    type: networkTypes.mainnet,\n    chainId: 1,\n    chainSelector: 1,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: mainnet,\n  },\n  base: {\n    name: 'base',\n    type: networkTypes.mainnet,\n    chainId: 8453,\n    chainSelector: 8453,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: base,\n  },\n  arbitrum: {\n    name: 'arbitrum',\n    type: networkTypes.mainnet,\n    chainId: 42161,\n    chainSelector: 42161,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: arbitrum,\n  },\n  polygon: {\n    name: 'polygon',\n    type: networkTypes.mainnet,\n    chainId: 137,\n    chainSelector: 137,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: polygon,\n  },\n  avalanche: {\n    name: 'avalanche',\n    type: networkTypes.mainnet,\n    chainId: 43114,\n    chainSelector: 43114,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: avalanche,\n  },\n  optimism: {\n    name: 'optimism',\n    type: networkTypes.mainnet,\n    chainId: 10,\n    chainSelector: 10,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: optimism,\n  },\n  polygonZkEvm: {\n    name: 'polygonZkEvm',\n    type: networkTypes.mainnet,\n    chainId: 137,\n    chainSelector: 137,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: polygon,\n  },\n};\n\nexport type ConceroMainnetNetworkNames = keyof typeof mainnetNetworks;\n", "import { defineChain } from 'viem';\n\nexport const astarShibuya = defineChain({\n  id: 81,\n  network: 'astar-shibuya',\n  name: 'Astar Shibuya',\n  nativeCurrency: { name: 'SBY', symbol: 'SBY', decimals: 18 },\n  testnet: true,\n  rpcUrls: {\n    default: {\n      http: ['https://evm.shibuya.astar.network'],\n    },\n  },\n});\n\nexport const coreTestnet = defineChain({\n  id: 1114,\n  network: 'core-testnet',\n  name: 'Core testnet',\n  nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },\n  testnet: true,\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.test2.btcs.network'],\n    },\n  },\n});\n\nexport const apechainCurtis = defineChain({\n  id: 33111,\n  network: 'apechainCurtis',\n  name: 'apechainCurtis',\n  nativeCurrency: { name: 'APE', symbol: 'APE', decimals: 18 },\n  testnet: true,\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.curtis.apechain.com'],\n    },\n  },\n});\n", "import {\n  arbitrumSepolia,\n  avalancheFuji,\n  baseSepolia,\n  bitlayerTestnet,\n  blastSepolia,\n  botanixTestnet,\n  bscTestnet,\n  celoAlfajores,\n  cronosTestnet,\n  gnosisChiado,\n  hashkeyTestnet,\n  inkSepolia,\n  lineaSepolia,\n  mantleSepoliaTestnet,\n  megaethTestnet,\n  modeTestnet,\n  monadTestnet,\n  optimismSepolia,\n  polygonAmoy,\n  saigon,\n  scrollSepolia,\n  seiTestnet,\n  sepolia,\n  shibariumTestnet,\n  soneiumMinato,\n  sonicBlazeTestnet,\n  unichainSepolia,\n  xLayerTestnet,\n  zircuitTestnet,\n} from 'viem/chains';\nimport { config } from '../constants/config';\nimport { apechainCurtis, astarShibuya, coreTestnet } from './customViemChains';\nimport { networkTypes } from './networkTypes';\n\nexport const testnetNetworks = {\n  arbitrumSepolia: {\n    name: 'arbitrumSepolia',\n    type: networkTypes.testnet,\n    chainId: 421614,\n    chainSelector: 421614,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: arbitrumSepolia,\n  },\n  baseSepolia: {\n    name: 'baseSepolia',\n    type: networkTypes.testnet,\n    chainId: 84532,\n    chainSelector: 84532,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: baseSepolia,\n  },\n  astarShibuya: {\n    name: 'astarShibuya',\n    type: networkTypes.testnet,\n    chainId: 81,\n    chainSelector: 81,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: astarShibuya,\n  },\n  roninSaigon: {\n    name: 'roninSaigon',\n    type: networkTypes.testnet,\n    chainId: 2021,\n    chainSelector: 2021,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: saigon,\n  },\n  megaethTestnet: {\n    name: 'megaethTestnet',\n    type: networkTypes.testnet,\n    chainId: 6342,\n    chainSelector: 6342,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: megaethTestnet,\n  },\n  sonicBlaze: {\n    name: 'sonicBlaze',\n    type: networkTypes.testnet,\n    chainId: 57054,\n    chainSelector: 57054,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: sonicBlazeTestnet,\n  },\n  monadTestnet: {\n    name: 'monadTestnet',\n    type: networkTypes.testnet,\n    chainId: 10_143,\n    chainSelector: 10_143,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: monadTestnet,\n  },\n  sepolia: {\n    name: 'sepolia',\n    type: networkTypes.testnet,\n    chainId: 11155111,\n    chainSelector: 11155111,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: sepolia,\n  },\n  lineaSepolia: {\n    name: 'lineaSepolia',\n    type: networkTypes.testnet,\n    chainId: 59141,\n    chainSelector: 59141,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: lineaSepolia,\n  },\n  bnbTestnet: {\n    name: 'bnbTestnet',\n    type: networkTypes.testnet,\n    chainId: 97,\n    chainSelector: 97,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: bscTestnet,\n  },\n  soneiumMinato: {\n    name: 'soneiumMinato',\n    type: networkTypes.testnet,\n    chainId: 1946,\n    chainSelector: 1946,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: soneiumMinato,\n  },\n  apechainCurtis: {\n    name: 'apechainCurtis',\n    type: networkTypes.testnet,\n    chainId: 33111,\n    chainSelector: 33111,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: apechainCurtis,\n  },\n  avalancheFuji: {\n    name: 'avalancheFuji',\n    type: networkTypes.testnet,\n    chainId: 43113,\n    chainSelector: 43113,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: avalancheFuji,\n  },\n  optimismSepolia: {\n    name: 'optimismSepolia',\n    type: networkTypes.testnet,\n    chainId: 11155420,\n    chainSelector: 11155420,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: optimismSepolia,\n  },\n  polygonAmoy: {\n    name: 'polygonAmoy',\n    type: networkTypes.testnet,\n    chainId: 80002,\n    chainSelector: 80002,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: polygonAmoy,\n  },\n  bitlayerTestnet: {\n    name: 'bitlayerTestnet',\n    type: networkTypes.testnet,\n    chainId: 200810,\n    chainSelector: 200810,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: bitlayerTestnet,\n  },\n  blastSepolia: {\n    name: 'blastSepolia',\n    type: networkTypes.testnet,\n    chainId: 168587773,\n    chainSelector: 1685877,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: blastSepolia,\n  },\n  botanixTestnet: {\n    name: 'botanixTestnet',\n    type: networkTypes.testnet,\n    chainId: 3636,\n    chainSelector: 3636,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: botanixTestnet,\n  },\n  celoAlfajores: {\n    name: 'celoAlfajores',\n    type: networkTypes.testnet,\n    chainId: 44_787,\n    chainSelector: 44_787,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: celoAlfajores,\n  },\n  coreTestnet: {\n    name: 'coreTestnet',\n    type: networkTypes.testnet,\n    chainId: 1114,\n    chainSelector: 1114,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: coreTestnet,\n  },\n  cronosTestnet: {\n    name: 'cronosTestnet',\n    type: networkTypes.testnet,\n    chainId: 338,\n    chainSelector: 338,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: cronosTestnet,\n  },\n  gnosisChiado: {\n    name: 'gnosisChiado',\n    type: networkTypes.testnet,\n    chainId: 10_200,\n    chainSelector: 10_200,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: gnosisChiado,\n  },\n  hashkeyTestnet: {\n    name: 'hashkeyTestnet',\n    type: networkTypes.testnet,\n    chainId: 133,\n    chainSelector: 133,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: hashkeyTestnet,\n  },\n  inkSepolia: {\n    name: 'inkSepolia',\n    type: networkTypes.testnet,\n    chainId: 763373,\n    chainSelector: 763373,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: inkSepolia,\n  },\n  mantleSepolia: {\n    name: 'mantleSepolia',\n    type: networkTypes.testnet,\n    chainId: 5003,\n    chainSelector: 5003,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: mantleSepoliaTestnet,\n  },\n  scrollSepolia: {\n    name: 'scrollSepolia',\n    type: networkTypes.testnet,\n    chainId: 534351,\n    chainSelector: 534351,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: scrollSepolia,\n  },\n  seiTestnet: {\n    name: 'seiTestnet',\n    type: networkTypes.testnet,\n    chainId: 1328,\n    chainSelector: 1328,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: seiTestnet,\n  },\n  shibariumPuppynet: {\n    name: 'shibariumPuppynet',\n    type: networkTypes.testnet,\n    chainId: 157,\n    chainSelector: 157,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: shibariumTestnet,\n  },\n  unichainSepolia: {\n    name: 'unichainSepolia',\n    type: networkTypes.testnet,\n    chainId: 1301,\n    chainSelector: 1301,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: unichainSepolia,\n  },\n  xlayerSepolia: {\n    name: 'xlayerSepolia',\n    type: networkTypes.testnet,\n    chainId: 195,\n    chainSelector: 195,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: xLayerTestnet,\n  },\n  zircuitTestnet: {\n    name: 'zircuitTestnet',\n    type: networkTypes.testnet,\n    chainId: 48899,\n    chainSelector: 48899,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: zircuitTestnet,\n  },\n  modeTestnet: {\n    name: 'modeTestnet',\n    type: networkTypes.testnet,\n    chainId: 919,\n    chainSelector: 919,\n    confirmations: config.DEFAULT_BLOCK_CONFIRMATIONS,\n    viemChain: modeTestnet,\n  },\n};\n\nexport type ConceroTestnetNetworkNames = keyof typeof testnetNetworks;\n", "import { mainnetNetworks } from './mainnetNetworks';\nimport { testnetNetworks } from './testnetNetworks';\n\nexport const networkEnvKeys: Record<string, string> = (() => {\n  const generateKeys = (networks: Record<string, any>) => {\n    return Object.keys(networks).reduce((acc, key) => {\n      acc[key] = key.replace(/([a-z])([A-Z])/g, '$1_$2').toUpperCase();\n      return acc;\n    }, {} as Record<string, string>);\n  };\n\n  const mainnetKeys = generateKeys(mainnetNetworks);\n  const testnetKeys = generateKeys(testnetNetworks);\n\n  return {\n    ...mainnetKeys,\n    ...testnetKeys,\n    localhost: 'LOCALHOST',\n    hardhat: 'LOCALHOST',\n  };\n})();\n\n\nexport type NetworkEnvKeys = typeof networkEnvKeys;\n", "import {\n  type ConceroMainnetNetworkNames,\n  mainnetNetworks,\n} from './mainnetNetworks';\nimport {\n  type ConceroTestnetNetworkNames,\n  testnetNetworks,\n} from './testnetNetworks';\nimport { type ConceroNetwork, type NetworkType } from \"./types\";\nimport {networkEnvKeys, type NetworkEnvKeys} from \"./networkEnvKeys\";\nimport {networkTypes} from \"./networkTypes\";\n\nconst conceroNetworks: Record<\n  ConceroMainnetNetworkNames | ConceroTestnetNetworkNames,\n  ConceroNetwork\n> = {\n  ...testnetNetworks,\n  ...mainnetNetworks,\n};\n\nexport type { ConceroNetwork, ConceroMainnetNetworkNames, ConceroTestnetNetworkNames, NetworkType, NetworkEnvKeys};\nexport { conceroNetworks, testnetNetworks, mainnetNetworks, networkEnvKeys, networkTypes};\n"],
  "mappings": "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",
  "names": ["version", "init_version", "__esmMin", "walk", "err", "fn", "errorConfig", "BaseError", "init_base", "__esmMin", "init_version", "docsBaseUrl", "docsPath", "docsSlug", "version", "_BaseError", "shortMessage", "args", "details", "docsUrl", "message", "IntegerOutOfRangeError", "SizeOverflowError", "init_encoding", "__esmMin", "init_base", "BaseError", "max", "min", "signed", "size", "value", "givenSize", "maxSize", "isHex", "value", "strict", "init_isHex", "__esmMin", "size", "value", "isHex", "init_size", "__esmMin", "init_isHex", "trim", "hexOrBytes", "dir", "data", "sliceLength", "i", "init_trim", "__esmMin", "SliceOffsetOutOfBoundsError", "SizeExceedsPaddingSizeError", "init_data", "__esmMin", "init_base", "BaseError", "offset", "position", "size", "targetSize", "type", "pad", "hexOrBytes", "dir", "size", "padHex", "padBytes", "hex_", "hex", "SizeExceedsPaddingSizeError", "bytes", "paddedBytes", "i", "padEnd", "init_pad", "__esmMin", "init_data", "toHex", "value", "opts", "numberToHex", "stringToHex", "boolToHex", "bytesToHex", "hex", "assertSize", "pad", "string", "i", "hexes", "value_", "signed", "size", "maxValue", "minValue", "suffix", "IntegerOutOfRangeError", "encoder", "init_toHex", "__esmMin", "init_encoding", "init_pad", "init_fromHex", "_v", "toBytes", "value", "opts", "numberToBytes", "boolToBytes", "isHex", "hexToBytes", "stringToBytes", "bytes", "assertSize", "pad", "charCodeToBase16", "char", "charCodeMap", "hex_", "hex", "hexString", "length", "index", "j", "nibbleLeft", "nibbleRight", "BaseError", "numberToHex", "encoder", "init_toBytes", "__esmMin", "init_base", "init_isHex", "init_pad", "init_fromHex", "init_toHex", "assertSize", "hexOrBytes", "size", "SizeOverflowError", "hexToBigInt", "hex", "opts", "signed", "value", "max", "hexToNumber", "init_fromHex", "__esmMin", "init_encoding", "init_size", "defineFormatter", "type", "format", "exclude", "overrides", "args", "formatted", "key", "init_formatter", "__esmMin", "formatTransactionRequest", "request", "rpcRequest", "formatAuthorizationList", "x", "bytesToHex", "numberToHex", "rpcTransactionType", "authorizationList", "authorization", "defineTransactionRequest", "init_transactionRequest", "__esmMin", "init_toHex", "init_formatter", "defineFormatter", "maxInt8", "maxInt16", "maxInt24", "maxInt32", "maxInt40", "maxInt48", "maxInt56", "maxInt64", "maxInt72", "maxInt80", "maxInt88", "maxInt96", "maxInt104", "maxInt112", "maxInt120", "maxInt128", "maxInt136", "maxInt144", "maxInt152", "maxInt160", "maxInt168", "maxInt176", "maxInt184", "maxInt192", "maxInt200", "maxInt208", "maxInt216", "maxInt224", "maxInt232", "maxInt240", "maxInt248", "maxInt256", "minInt8", "minInt16", "minInt24", "minInt32", "minInt40", "minInt48", "minInt56", "minInt64", "minInt72", "minInt80", "minInt88", "minInt96", "minInt104", "minInt112", "minInt120", "minInt128", "minInt136", "minInt144", "minInt152", "minInt160", "minInt168", "minInt176", "minInt184", "minInt192", "minInt200", "minInt208", "minInt216", "minInt224", "minInt232", "minInt240", "minInt248", "minInt256", "maxUint8", "maxUint16", "maxUint24", "maxUint32", "maxUint40", "maxUint48", "maxUint56", "maxUint64", "maxUint72", "maxUint80", "maxUint88", "maxUint96", "maxUint104", "maxUint112", "maxUint120", "maxUint128", "maxUint136", "maxUint144", "maxUint152", "maxUint160", "maxUint168", "maxUint176", "maxUint184", "maxUint192", "maxUint200", "maxUint208", "maxUint216", "maxUint224", "maxUint232", "maxUint240", "maxUint248", "maxUint256", "init_number", "__esmMin", "concatHex", "values", "acc", "x", "init_concat", "__esmMin", "NegativeOffsetError", "PositionOutOfBoundsError", "RecursiveReadLimitExceededError", "init_cursor", "__esmMin", "init_base", "BaseError", "offset", "length", "position", "count", "limit", "createCursor", "bytes", "recursiveReadLimit", "cursor", "staticCursor", "init_cursor", "__esmMin", "RecursiveReadLimitExceededError", "position", "PositionOutOfBoundsError", "offset", "NegativeOffsetError", "position_", "length", "byte", "value", "size", "oldPosition", "count", "etherUnits", "gweiUnits", "init_unit", "__esmMin", "formatUnits", "value", "decimals", "display", "negative", "integer", "fraction", "init_formatUnits", "__esmMin", "formatEther", "wei", "unit", "formatUnits", "etherUnits", "init_formatEther", "__esmMin", "init_unit", "init_formatUnits", "formatGwei", "wei", "unit", "formatUnits", "gweiUnits", "init_formatGwei", "__esmMin", "init_unit", "init_formatUnits", "prettyPrint", "args", "entries", "key", "value", "maxLength", "acc", "FeeConflictError", "InvalidLegacyVError", "InvalidSerializableTransactionError", "InvalidStorageKeySizeError", "init_transaction", "__esmMin", "init_base", "BaseError", "v", "transaction", "storageKey", "anumber", "n", "isBytes", "a", "abytes", "b", "lengths", "aexists", "instance", "checkFinished", "aoutput", "out", "min", "init_assert", "__esmMin", "u32", "arr", "createView", "rotr", "word", "shift", "byteSwap", "byteSwap32", "i", "utf8ToBytes", "str", "toBytes", "data", "abytes", "wrapConstructor", "hashCons", "hashC", "msg", "tmp", "wrapXOFConstructorWithOpts", "opts", "isLE", "Hash", "init_utils", "__esmMin", "init_assert", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "Chi", "a", "b", "c", "Maj", "HashMD", "init_md", "__esmMin", "init_assert", "init_utils", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "aexists", "buffer", "toBytes", "len", "pos", "take", "dataView", "out", "aoutput", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "sha256", "init_sha256", "__esmMin", "init_md", "init_utils", "HashMD", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "Chi", "T2", "Maj", "wrapConstructor", "InvalidAddressError", "init_address", "__esmMin", "init_base", "BaseError", "address", "InvalidChainIdError", "init_chain", "__esmMin", "init_base", "BaseError", "chainId", "ExecutionRevertedError", "FeeCapTooHighError", "FeeCapTooLowError", "NonceTooHighError", "NonceTooLowError", "NonceMaxValueError", "InsufficientFundsError", "IntrinsicGasTooHighError", "IntrinsicGasTooLowError", "TransactionTypeNotSupportedError", "TipAboveFeeCapError", "UnknownNodeError", "init_node", "__esmMin", "init_formatGwei", "init_base", "BaseError", "cause", "message", "reason", "maxFeePerGas", "formatGwei", "nonce", "gas", "maxPriorityFeePerGas", "LruMap", "init_lru", "__esmMin", "size", "key", "value", "firstKey", "fromBig", "n", "le", "U32_MASK64", "_32n", "split", "lst", "Ah", "Al", "i", "h", "l", "rotlSH", "rotlSL", "rotlBH", "rotlBL", "init_u64", "__esmMin", "s", "keccakP", "s", "rounds", "B", "round", "x", "idx1", "idx0", "B0", "B1", "Th", "rotlH", "Tl", "rotlL", "curH", "curL", "t", "shift", "SHA3_ROTL", "PI", "SHA3_PI", "y", "SHA3_IOTA_H", "SHA3_IOTA_L", "_SHA3_IOTA", "_0n", "_1n", "_2n", "_7n", "_256n", "_0x71n", "Keccak", "gen", "sha3_224", "sha3_256", "sha3_384", "sha3_512", "keccak_224", "keccak_256", "keccak_384", "keccak_512", "genShake", "shake128", "shake256", "init_sha3", "__esmMin", "init_assert", "init_u64", "init_utils", "R", "j", "split", "h", "l", "rotlBH", "rotlSH", "rotlBL", "rotlSL", "_Keccak", "Hash", "blockLen", "suffix", "outputLen", "enableXOF", "anumber", "u32", "isLE", "byteSwap32", "data", "aexists", "state", "toBytes", "len", "pos", "take", "i", "out", "abytes", "bufferOut", "bytes", "aoutput", "to", "wrapConstructor", "wrapXOFConstructorWithOpts", "opts", "keccak256", "value", "to_", "to", "bytes", "keccak_256", "isHex", "toBytes", "toHex", "init_keccak256", "__esmMin", "init_sha3", "init_isHex", "init_toBytes", "init_toHex", "checksumAddress", "address_", "chainId", "checksumAddressCache", "hexAddress", "hash", "keccak256", "stringToBytes", "address", "i", "result", "init_getAddress", "__esmMin", "init_toBytes", "init_keccak256", "init_lru", "LruMap", "isAddress", "address", "options", "strict", "cacheKey", "isAddressCache", "result", "addressRegex", "checksumAddress", "init_isAddress", "__esmMin", "init_lru", "init_getAddress", "LruMap", "slice", "value", "start", "end", "strict", "isHex", "sliceHex", "sliceBytes", "assertStartOffset", "size", "SliceOffsetOutOfBoundsError", "assertEndOffset", "value_", "init_slice", "__esmMin", "init_data", "init_isHex", "init_size", "parseAccount", "account", "init_parseAccount", "__esmMin", "prettyStateMapping", "stateMapping", "pretty", "slot", "value", "prettyStateOverride", "stateOverride", "address", "state", "val", "init_stateOverride", "__esmMin", "CallExecutionError", "init_contract", "__esmMin", "init_parseAccount", "init_formatEther", "init_formatGwei", "init_base", "init_stateOverride", "init_transaction", "BaseError", "cause", "account_", "docsPath", "chain", "data", "gas", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "value", "stateOverride", "account", "parseAccount", "prettyArgs", "prettyPrint", "formatEther", "formatGwei", "prettyStateOverride", "getNodeError", "err", "args", "message", "executionRevertedError", "BaseError", "e", "ExecutionRevertedError", "FeeCapTooHighError", "FeeCapTooLowError", "NonceTooHighError", "NonceTooLowError", "NonceMaxValueError", "InsufficientFundsError", "IntrinsicGasTooHighError", "IntrinsicGasTooLowError", "TransactionTypeNotSupportedError", "TipAboveFeeCapError", "UnknownNodeError", "init_getNodeError", "__esmMin", "init_base", "init_node", "getCallError", "err", "docsPath", "args", "cause", "getNodeError", "UnknownNodeError", "CallExecutionError", "init_getCallError", "__esmMin", "init_contract", "init_node", "init_getNodeError", "extract", "value_", "format", "value", "extract_", "formatted", "keys", "key", "init_extract", "__esmMin", "assertRequest", "args", "account_", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "to", "account", "parseAccount", "isAddress", "InvalidAddressError", "FeeConflictError", "maxUint256", "FeeCapTooHighError", "TipAboveFeeCapError", "init_assertRequest", "__esmMin", "init_parseAccount", "init_number", "init_address", "init_node", "init_transaction", "init_isAddress", "index_exports", "__export", "conceroNetworks", "config", "mainnetNetworks", "networkEnvKeys", "networkTypes", "testnetNetworks", "__toCommonJS", "config", "defineChain", "chain", "init_formatter", "init_fromHex", "init_formatter", "transactionType", "formatTransaction", "transaction", "transaction_", "hexToNumber", "formatAuthorizationList", "defineTransaction", "defineFormatter", "authorizationList", "authorization", "formatBlock", "block", "transactions", "transaction", "formatTransaction", "defineBlock", "defineFormatter", "formatLog", "log", "args", "eventName", "init_fromHex", "init_formatter", "receiptStatuses", "formatTransactionReceipt", "transactionReceipt", "receipt", "log", "formatLog", "hexToNumber", "transactionType", "defineTransactionReceipt", "defineFormatter", "init_base", "init_cursor", "init_toBytes", "init_toHex", "toRlp", "bytes", "to", "encodable", "getEncodable", "cursor", "createCursor", "bytesToHex", "getEncodable", "bytes", "getEncodableList", "x", "getEncodableBytes", "list", "bodyLength", "acc", "sizeOfBodyLength", "getSizeOfLength", "cursor", "encode", "bytesOrHex", "hexToBytes", "sizeOfBytesLength", "length", "BaseError", "init_transaction", "init_toHex", "serializeAuthorizationList", "authorizationList", "serializedAuthorizationList", "authorization", "chainId", "nonce", "signature", "contractAddress", "toHex", "toYParitySignatureArray", "init_toBytes", "init_toHex", "blobsToCommitments", "parameters", "kzg", "to", "blobs", "x", "hexToBytes", "commitments", "blob", "bytesToHex", "init_toBytes", "init_toHex", "blobsToProofs", "parameters", "kzg", "to", "blobs", "x", "hexToBytes", "commitments", "proofs", "i", "blob", "commitment", "bytesToHex", "init_toHex", "init_sha256", "init_isHex", "init_toBytes", "init_toHex", "sha256", "value", "to_", "to", "bytes", "isHex", "toBytes", "toHex", "commitmentToVersionedHash", "parameters", "commitment", "version", "to", "versionedHash", "sha256", "bytesToHex", "commitmentsToVersionedHashes", "parameters", "commitments", "version", "to", "hashes", "commitment", "commitmentToVersionedHash", "init_base", "BlobSizeTooLargeError", "BaseError", "maxSize", "size", "EmptyBlobError", "InvalidVersionedHashSizeError", "hash", "InvalidVersionedHashVersionError", "version", "init_cursor", "init_size", "init_toBytes", "init_toHex", "toBlobs", "parameters", "to", "data", "hexToBytes", "size_", "size", "EmptyBlobError", "BlobSizeTooLargeError", "blobs", "active", "position", "blob", "createCursor", "bytes", "x", "bytesToHex", "toBlobSidecars", "parameters", "data", "kzg", "to", "blobs", "toBlobs", "commitments", "blobsToCommitments", "proofs", "blobsToProofs", "sidecars", "i", "init_concat", "init_trim", "init_toHex", "init_number", "init_address", "init_base", "init_chain", "init_node", "init_isAddress", "init_size", "init_slice", "init_fromHex", "assertTransactionEIP7702", "transaction", "authorizationList", "authorization", "chainId", "address", "isAddress", "InvalidAddressError", "InvalidChainIdError", "assertTransactionEIP1559", "assertTransactionEIP4844", "blobVersionedHashes", "EmptyBlobError", "hash", "size_", "size", "version", "hexToNumber", "slice", "InvalidVersionedHashSizeError", "InvalidVersionedHashVersionError", "maxPriorityFeePerGas", "maxFeePerGas", "to", "maxUint256", "FeeCapTooHighError", "TipAboveFeeCapError", "assertTransactionEIP2930", "gasPrice", "BaseError", "assertTransactionLegacy", "init_transaction", "getTransactionType", "transaction", "InvalidSerializableTransactionError", "init_address", "init_transaction", "init_isAddress", "serializeAccessList", "accessList", "serializedAccessList", "i", "address", "storageKeys", "j", "InvalidStorageKeySizeError", "isAddress", "InvalidAddressError", "serializeTransaction", "transaction", "signature", "type", "getTransactionType", "serializeTransactionEIP1559", "serializeTransactionEIP2930", "serializeTransactionEIP4844", "serializeTransactionEIP7702", "serializeTransactionLegacy", "authorizationList", "chainId", "gas", "nonce", "to", "value", "maxFeePerGas", "maxPriorityFeePerGas", "accessList", "data", "assertTransactionEIP7702", "serializedAccessList", "serializeAccessList", "serializedAuthorizationList", "serializeAuthorizationList", "concatHex", "toRlp", "toHex", "toYParitySignatureArray", "maxFeePerBlobGas", "assertTransactionEIP4844", "blobVersionedHashes", "sidecars", "blobs", "x", "bytesToHex", "kzg", "commitments", "blobsToCommitments", "commitmentsToVersionedHashes", "proofs", "blobsToProofs", "toBlobSidecars", "serializedTransaction", "i", "blob", "commitment", "proof", "assertTransactionEIP1559", "gasPrice", "assertTransactionEIP2930", "assertTransactionLegacy", "v", "InvalidLegacyVError", "r", "trim", "s", "signature_", "yParity", "contracts", "init_fromHex", "formatters", "defineBlock", "args", "transaction", "formatted", "formatTransaction", "hexToBigInt", "defineTransaction", "defineTransactionReceipt", "init_address", "init_isAddress", "init_concat", "init_toHex", "serializeTransaction", "transaction", "signature", "isDeposit", "serializeTransactionDeposit", "serializers", "assertTransactionDeposit", "sourceHash", "data", "from", "gas", "isSystemTx", "mint", "to", "value", "serializedTransaction", "toHex", "concatHex", "toRlp", "isAddress", "InvalidAddressError", "chainConfig", "contracts", "formatters", "serializers", "arbitrum", "defineChain", "arbitrumSepolia", "defineChain", "avalanche", "defineChain", "avalancheFuji", "defineChain", "sourceId", "base", "defineChain", "chainConfig", "sourceId", "baseSepolia", "defineChain", "chainConfig", "bitlayerTestnet", "defineChain", "sourceId", "blastSepolia", "defineChain", "botanixTestnet", "defineChain", "bscTestnet", "defineChain", "fees", "params", "gasPrice", "maxPriorityFeePerGas", "estimateFeePerGasInFeeCurrency", "estimateMaxPriorityFeePerGasInFeeCurrency", "client", "feeCurrency", "fee", "feesPerGas", "init_fromHex", "init_transactionRequest", "init_trim", "isEmpty", "value", "trim", "isPresent", "isEIP1559", "transaction", "isCIP64", "formatters", "defineBlock", "args", "transaction", "formatTransaction", "hexToBigInt", "defineTransaction", "defineTransactionRequest", "request", "isCIP64", "init_number", "init_address", "init_base", "init_chain", "init_node", "init_isAddress", "init_concat", "init_toHex", "serializeTransaction", "transaction", "signature", "isCIP64", "serializeTransactionCIP64", "serializers", "assertTransactionCIP64", "chainId", "gas", "nonce", "to", "value", "maxFeePerGas", "maxPriorityFeePerGas", "accessList", "feeCurrency", "data", "serializedTransaction", "toHex", "serializeAccessList", "toYParitySignatureArray", "concatHex", "toRlp", "MAX_MAX_FEE_PER_GAS", "maxUint256", "assertTransactionCIP64", "transaction", "chainId", "maxPriorityFeePerGas", "gasPrice", "maxFeePerGas", "to", "feeCurrency", "InvalidChainIdError", "isAddress", "InvalidAddressError", "BaseError", "isPresent", "MAX_MAX_FEE_PER_GAS", "FeeCapTooHighError", "TipAboveFeeCapError", "isEmpty", "chainConfig", "contracts", "formatters", "serializers", "fees", "sourceId", "celoAlfajores", "defineChain", "chainConfig", "cronosTestnet", "defineChain", "gnosisChiado", "defineChain", "hashkeyTestnet", "defineChain", "sourceId", "inkSepolia", "defineChain", "chainConfig", "init_parseAccount", "init_base", "AccountNotFoundError", "BaseError", "docsPath", "init_toHex", "init_getCallError", "init_extract", "init_transactionRequest", "init_assertRequest", "estimateGas", "client", "args", "account_", "AccountNotFoundError", "account", "parseAccount", "accessList", "blockNumber", "blockTag", "data", "gas", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "value", "rest", "block", "numberToHex", "assertRequest", "chainFormat", "request", "formatTransactionRequest", "extract", "baseFeePerGas", "gasLimit", "priorityFeePerGas", "err", "getCallError", "chainConfig", "estimateFeesPerGas", "block", "client", "request", "response", "x", "multiply", "type", "estimateGas", "maxPriorityFeePerGas", "maxFeePerGas", "lineaSepolia", "defineChain", "chainConfig", "mainnet", "defineChain", "mantleSepoliaTestnet", "defineChain", "megaethTestnet", "defineChain", "sourceId", "modeTestnet", "defineChain", "chainConfig", "monadTestnet", "defineChain", "sourceId", "optimism", "defineChain", "chainConfig", "sourceId", "optimismSepolia", "defineChain", "chainConfig", "polygon", "defineChain", "polygonAmoy", "defineChain", "saigon", "defineChain", "scrollSepolia", "defineChain", "seiTestnet", "defineChain", "sepolia", "defineChain", "shibariumTestnet", "defineChain", "sourceId", "soneiumMinato", "defineChain", "chainConfig", "sonicBlazeTestnet", "defineChain", "sourceId", "unichainSepolia", "defineChain", "chainConfig", "xLayerTestnet", "defineChain", "sourceId", "zircuitTestnet", "defineChain", "chainConfig", "networkTypes", "mainnetNetworks", "networkTypes", "config", "mainnet", "base", "arbitrum", "polygon", "avalanche", "optimism", "astarShibuya", "defineChain", "coreTestnet", "apechainCurtis", "testnetNetworks", "networkTypes", "config", "arbitrumSepolia", "baseSepolia", "astarShibuya", "saigon", "megaethTestnet", "sonicBlazeTestnet", "monadTestnet", "sepolia", "lineaSepolia", "bscTestnet", "soneiumMinato", "apechainCurtis", "avalancheFuji", "optimismSepolia", "polygonAmoy", "bitlayerTestnet", "blastSepolia", "botanixTestnet", "celoAlfajores", "coreTestnet", "cronosTestnet", "gnosisChiado", "hashkeyTestnet", "inkSepolia", "mantleSepoliaTestnet", "scrollSepolia", "seiTestnet", "shibariumTestnet", "unichainSepolia", "xLayerTestnet", "zircuitTestnet", "modeTestnet", "networkEnvKeys", "generateKeys", "networks", "acc", "key", "mainnetKeys", "mainnetNetworks", "testnetKeys", "testnetNetworks", "conceroNetworks", "testnetNetworks", "mainnetNetworks"]
}
