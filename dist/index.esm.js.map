{
  "version": 3,
  "sources": ["../src/constants/config.ts", "../src/networks/getNetworkEnvKey.ts", "../src/networks/networkTypes.ts"],
  "sourcesContent": ["export const config = {\n  DEFAULT_BLOCK_CONFIRMATIONS: 2,\n};\n", "/**\n * Converts a network name from camelCase to SNAKE_CASE\n *\n * @param networkName The network name in camelCase\n * @returns The network name in SNAKE_CASE\n */\nexport function getNetworkEnvKey(networkName: string): string {\n  if (!networkName) {\n    throw new Error('Network name must be provided');\n  }\n  return camelCaseToCapsSnakeCase(networkName);\n}\n\n/**\n * Converts a network name from camelCase to SNAKE_CASE\n *\n * @param networkName The network name in camelCase\n * @returns The network name in SNAKE_CASE\n */\nexport function getNetworkKey(NETWORK_NAME: string): string {\n  if (!NETWORK_NAME) {\n    throw new Error('Network name must be provided');\n  }\n  return capsSnakeCaseToCamelCase(NETWORK_NAME);\n}\n\n/**\n * Converts a string from CAPS_SNAKE_CASE to camelCase\n *\n * @param snakeCaseString The string in CAPS_SNAKE_CASE format\n * @returns The string converted to camelCase format\n */\nexport function capsSnakeCaseToCamelCase(snakeCaseString: string): string {\n  if (!snakeCaseString) {\n    throw new Error('String must be provided');\n  }\n\n  return snakeCaseString\n    .toLowerCase()\n    .replace(/_([a-z])/g, (_, char) => char.toUpperCase());\n}\n\n/**\n * Converts a string from camelCase to CAPS_SNAKE_CASE\n *\n * @param camelCaseString The string in camelCase format\n * @returns The string converted to CAPS_SNAKE_CASE format\n */\nexport function camelCaseToCapsSnakeCase(camelCaseString: string): string {\n  if (!camelCaseString) {\n    throw new Error('String must be provided');\n  }\n\n  return camelCaseString.replace(/([a-z0-9])([A-Z])/g, '$1_$2').toUpperCase();\n}\n\nexport function getNetworkName(networkEnvKey: string): string {\n  if (!networkEnvKey) {\n    throw new Error('Network name must be provided');\n  }\n\n  return networkEnvKey\n    .toLowerCase()\n    .split('_')\n    .map((word, index) =>\n      index === 0 ? word : word[0].toUpperCase() + word.slice(1)\n    )\n    .join('');\n}\n", "import { type NetworkType } from './types';\n\nexport const networkTypes: Record<NetworkType, NetworkType> = {\n  mainnet: 'mainnet',\n  testnet: 'testnet',\n  localhost: 'localhost',\n};\n"],
  "mappings": ";AAAO,IAAM,SAAS;AAAA,EACpB,6BAA6B;AAC/B;;;ACIO,SAAS,iBAAiB,aAA6B;AAC5D,MAAI,CAAC,aAAa;AAChB,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AACA,SAAO,yBAAyB,WAAW;AAC7C;AAQO,SAAS,cAAc,cAA8B;AAC1D,MAAI,CAAC,cAAc;AACjB,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AACA,SAAO,yBAAyB,YAAY;AAC9C;AAQO,SAAS,yBAAyB,iBAAiC;AACxE,MAAI,CAAC,iBAAiB;AACpB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAEA,SAAO,gBACJ,YAAY,EACZ,QAAQ,aAAa,CAAC,GAAG,SAAS,KAAK,YAAY,CAAC;AACzD;AAQO,SAAS,yBAAyB,iBAAiC;AACxE,MAAI,CAAC,iBAAiB;AACpB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAEA,SAAO,gBAAgB,QAAQ,sBAAsB,OAAO,EAAE,YAAY;AAC5E;;;ACpDO,IAAM,eAAiD;AAAA,EAC5D,SAAS;AAAA,EACT,SAAS;AAAA,EACT,WAAW;AACb;",
  "names": []
}
